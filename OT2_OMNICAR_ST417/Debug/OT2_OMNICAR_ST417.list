
OT2_OMNICAR_ST417.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b0  080056b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080056b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000007c  08005734  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005734  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8d2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea1  00000000  00000000  0002e97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00030820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00031438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022382  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a583  00000000  00000000  00054302  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc20e  00000000  00000000  0005e885  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012aa93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  0012ab10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005620 	.word	0x08005620

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005620 	.word	0x08005620

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b097      	sub	sp, #92	; 0x5c
 8000584:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fe0d 	bl	80021a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f881 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f9ef 	bl	8000970 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000592:	f000 f8e5 	bl	8000760 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000596:	f000 f935 	bl	8000804 <MX_ADC2_Init>
  MX_I2C3_Init();
 800059a:	f000 f985 	bl	80008a8 <MX_I2C3_Init>
  MX_SPI3_Init();
 800059e:	f000 f9b1 	bl	8000904 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* NRF */
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi3);					// Initialization of all register into there reset value
 80005a2:	4c2e      	ldr	r4, [pc, #184]	; (800065c <main+0xdc>)
 80005a4:	4668      	mov	r0, sp
 80005a6:	1d23      	adds	r3, r4, #4
 80005a8:	2254      	movs	r2, #84	; 0x54
 80005aa:	4619      	mov	r1, r3
 80005ac:	f004 fc28 	bl	8004e00 <memcpy>
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	2240      	movs	r2, #64	; 0x40
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	482a      	ldr	r0, [pc, #168]	; (8000660 <main+0xe0>)
 80005b8:	f000 fdd0 	bl	800115c <NRF24_begin>
  NRF24_transmitInit(TxpipeAddrs, channel, payload_size);				// Call function for initialization of transmission
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <main+0xe4>)
 80005be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <main+0xe8>)
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <main+0xec>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	f001 f99d 	bl	8001908 <NRF24_transmitInit>

  /* LCD I2C */
  lcd_i2c_init(&hi2c3);													// Call function for initialization of LCD
 80005ce:	4828      	ldr	r0, [pc, #160]	; (8000670 <main+0xf0>)
 80005d0:	f001 fc50 	bl	8001e74 <lcd_i2c_init>
  lcd_i2c_text_placement();												// Function call for the placement of the static text on the screen
 80005d4:	f001 fce0 	bl	8001f98 <lcd_i2c_text_placement>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ihm_joystick(&hadc1, &hadc2, myTxData);													// Function call for the joystick placement
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <main+0xf4>)
 80005da:	4927      	ldr	r1, [pc, #156]	; (8000678 <main+0xf8>)
 80005dc:	4827      	ldr	r0, [pc, #156]	; (800067c <main+0xfc>)
 80005de:	f001 f9d3 	bl	8001988 <ihm_joystick>
	  counter = ihm_PWR_button(GPIOE, PWR_UP_Pin, PWR_DOWN_Pin, myTxData);						// Function call which return the state of the power counter
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <main+0xf4>)
 80005e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4824      	ldr	r0, [pc, #144]	; (8000680 <main+0x100>)
 80005ee:	f001 fa8f 	bl	8001b10 <ihm_PWR_button>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <main+0x104>)
 80005f8:	701a      	strb	r2, [r3, #0]
	  ihm_buzzer_ON_OFF(SW_BUZZER_GPIO_Port, SW_BUZZER_Pin, myTxData);							// Function call to active buzzer
 80005fa:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <main+0xf4>)
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4820      	ldr	r0, [pc, #128]	; (8000680 <main+0x100>)
 8000600:	f001 fb3e 	bl	8001c80 <ihm_buzzer_ON_OFF>
	  ihm_ROTA_button(ROTA_LEFT_GPIO_Port, ROTA_LEFT_Pin, ROTA_RIGHT_Pin, myTxData);			// Function call for the power rotation button
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <main+0xf4>)
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	481c      	ldr	r0, [pc, #112]	; (8000680 <main+0x100>)
 8000610:	f001 fafc 	bl	8001c0c <ihm_ROTA_button>

	  HAL_Delay(5);																				// delay of 5 ms
 8000614:	2005      	movs	r0, #5
 8000616:	f001 fe37 	bl	8002288 <HAL_Delay>

	  NRF24_dataTransmission(myTxData, 3, AckPayload, 3);										// Function call for data transmission and ack
 800061a:	2303      	movs	r3, #3
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <main+0x108>)
 800061e:	2103      	movs	r1, #3
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <main+0xf4>)
 8000622:	f001 f995 	bl	8001950 <NRF24_dataTransmission>

	  ihm_active_buzzer(BUZZER_GPIO_Port, BUZZER_Pin, AckPayload);								// Function call for active buzzer
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <main+0x108>)
 8000628:	2108      	movs	r1, #8
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <main+0x100>)
 800062c:	f001 fb56 	bl	8001cdc <ihm_active_buzzer>

	  batt = ihm_getBatteryLevel(&hadc2);														// Function call to calculate the percent of battery remaining
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xf8>)
 8000632:	f001 fb91 	bl	8001d58 <ihm_getBatteryLevel>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <main+0x10c>)
 800063c:	801a      	strh	r2, [r3, #0]

	  lcd_i2c_power_state(counter);																// Function call to display the power management on the LCD
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <main+0x104>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fce6 	bl	8002014 <lcd_i2c_power_state>
	  lcd_i2c_bat0T1_state(myTxData);															// Function call to display the battery percent of OT1
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0xf4>)
 800064a:	f001 fd3d 	bl	80020c8 <lcd_i2c_bat0T1_state>
	  lcd_i2c_bat0T2_state(batt);																// Function call to display the battery percent of OT2
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <main+0x10c>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fd59 	bl	800210c <lcd_i2c_bat0T2_state>
	  ihm_joystick(&hadc1, &hadc2, myTxData);													// Function call for the joystick placement
 800065a:	e7bd      	b.n	80005d8 <main+0x58>
 800065c:	20000238 	.word	0x20000238
 8000660:	40020400 	.word	0x40020400
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008
 800066c:	20000009 	.word	0x20000009
 8000670:	20000198 	.word	0x20000198
 8000674:	20000098 	.word	0x20000098
 8000678:	200001f0 	.word	0x200001f0
 800067c:	20000290 	.word	0x20000290
 8000680:	40021000 	.word	0x40021000
 8000684:	2000009b 	.word	0x2000009b
 8000688:	200001ec 	.word	0x200001ec
 800068c:	2000009c 	.word	0x2000009c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fbb9 	bl	8004e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemClock_Config+0xc8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <SystemClock_Config+0xc8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <SystemClock_Config+0xcc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xcc>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000704:	2354      	movs	r3, #84	; 0x54
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f9cd 	bl	8003ab4 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 f9c4 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2102      	movs	r1, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fc27 	bl	8003f94 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800074c:	f000 f9ae 	bl	8000aac <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC1_Init+0xa0>)
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007c2:	f001 fd83 	bl	80022cc <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f96e 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007d0:	230f      	movs	r3, #15
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007e2:	f001 ff0f 	bl	8002604 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 f95e 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000290 	.word	0x20000290
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_ADC2_Init+0x98>)
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <MX_ADC2_Init+0x9c>)
 800081a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_ADC2_Init+0x98>)
 800081e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000822:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_ADC2_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_ADC2_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_ADC2_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_ADC2_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_ADC2_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_ADC2_Init+0x98>)
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <MX_ADC2_Init+0xa0>)
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_ADC2_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_ADC2_Init+0x98>)
 8000852:	2201      	movs	r2, #1
 8000854:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_ADC2_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_ADC2_Init+0x98>)
 8000860:	2201      	movs	r2, #1
 8000862:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_ADC2_Init+0x98>)
 8000866:	f001 fd31 	bl	80022cc <HAL_ADC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000870:	f000 f91c 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000874:	2308      	movs	r3, #8
 8000876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_ADC2_Init+0x98>)
 8000886:	f001 febd 	bl	8002604 <HAL_ADC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 f90c 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200001f0 	.word	0x200001f0
 80008a0:	40012100 	.word	0x40012100
 80008a4:	0f000001 	.word	0x0f000001

080008a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C3_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C3_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C3_Init+0x50>)
 80008e6:	f002 fb77 	bl	8002fd8 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f8dc 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000198 	.word	0x20000198
 80008fc:	40005c00 	.word	0x40005c00
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_SPI3_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_SPI3_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SPI3_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_SPI3_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_SPI3_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_SPI3_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SPI3_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SPI3_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SPI3_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_SPI3_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SPI3_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_SPI3_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SPI3_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_SPI3_Init+0x64>)
 8000956:	f003 fcd5 	bl	8004304 <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 f8a4 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000238 	.word	0x20000238
 800096c:	40003c00 	.word	0x40003c00

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x12c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <MX_GPIO_Init+0x12c>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <MX_GPIO_Init+0x12c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3c      	ldr	r2, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a35      	ldr	r2, [pc, #212]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2e      	ldr	r2, [pc, #184]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_GPIO_Init+0x12c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <MX_GPIO_Init+0x12c>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x12c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2108      	movs	r1, #8
 8000a16:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0x130>)
 8000a18:	f002 faaa 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	21c0      	movs	r1, #192	; 0xc0
 8000a20:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x134>)
 8000a22:	f002 faa5 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000a26:	2308      	movs	r3, #8
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0x130>)
 8000a3e:	f002 f8e5 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BUZZER_Pin ROTA_RIGHT_Pin PWR_UP_Pin PWR_DOWN_Pin
                           ROTA_LEFT_Pin */
  GPIO_InitStruct.Pin = SW_BUZZER_Pin|ROTA_RIGHT_Pin|PWR_UP_Pin|PWR_DOWN_Pin
 8000a42:	f44f 5371 	mov.w	r3, #15424	; 0x3c40
 8000a46:	617b      	str	r3, [r7, #20]
                          |ROTA_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0x130>)
 8000a58:	f002 f8d8 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_JOY_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = SW_JOY_Pin|IRQ_Pin;
 8000a5c:	f248 0380 	movw	r3, #32896	; 0x8080
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_GPIO_Init+0x138>)
 8000a72:	f002 f8cb 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000a76:	23c0      	movs	r3, #192	; 0xc0
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_GPIO_Init+0x134>)
 8000a8e:	f002 f8bd 	bl	8002c0c <HAL_GPIO_Init>

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40020000 	.word	0x40020000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a3b      	ldr	r2, [pc, #236]	; (8000c18 <HAL_ADC_MspInit+0x10c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d128      	bne.n	8000b80 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a39      	ldr	r2, [pc, #228]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = VRX_Pin;
 8000b66:	2320      	movs	r3, #32
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VRX_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4829      	ldr	r0, [pc, #164]	; (8000c20 <HAL_ADC_MspInit+0x114>)
 8000b7a:	f002 f847 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b7e:	e046      	b.n	8000c0e <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <HAL_ADC_MspInit+0x118>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d141      	bne.n	8000c0e <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_ADC_MspInit+0x110>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_BAT_Pin;
 8000bde:	2310      	movs	r3, #16
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BAT_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_ADC_MspInit+0x11c>)
 8000bf2:	f002 f80b 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VRY_Pin;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VRY_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <HAL_ADC_MspInit+0x120>)
 8000c0a:	f001 ffff 	bl	8002c0c <HAL_GPIO_Init>
}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40012100 	.word	0x40012100
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <HAL_I2C_MspInit+0xc4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d14b      	bne.n	8000cea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4815      	ldr	r0, [pc, #84]	; (8000cfc <HAL_I2C_MspInit+0xcc>)
 8000ca8:	f001 ffb0 	bl	8002c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <HAL_I2C_MspInit+0xd0>)
 8000cca:	f001 ff9f 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000cd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_I2C_MspInit+0xc8>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40005c00 	.word	0x40005c00
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12c      	bne.n	8000d80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d70:	2306      	movs	r3, #6
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d7c:	f001 ff46 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40003c00 	.word	0x40003c00
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020800 	.word	0x40020800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f001 fa2e 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f003 ffc4 	bl	8004dac <__errno>
 8000e24:	4602      	mov	r2, r0
 8000e26:	230c      	movs	r3, #12
 8000e28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20020000 	.word	0x20020000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	200000a0 	.word	0x200000a0
 8000e58:	200002e0 	.word	0x200002e0

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SystemInit+0x28>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <SystemInit+0x28>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SystemInit+0x28>)
 8000e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e76:	609a      	str	r2, [r3, #8]
#endif
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NRF24_DelayMicroSeconds>:
static SPI_HandleTypeDef nrf24_hspi;						// create static handle to have the SPI used

//*** FUNCTIONS ***//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <NRF24_DelayMicroSeconds+0x38>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <NRF24_DelayMicroSeconds+0x3c>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	0c9a      	lsrs	r2, r3, #18
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000ea8:	bf00      	nop
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	60fa      	str	r2, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1fa      	bne.n	8000eaa <NRF24_DelayMicroSeconds+0x22>
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	2000000c 	.word	0x2000000c
 8000ec4:	165e9f81 	.word	0x165e9f81

08000ec8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <NRF24_csn+0x20>
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <NRF24_csn+0x38>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <NRF24_csn+0x3c>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f002 f845 	bl	8002f70 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000ee6:	e007      	b.n	8000ef8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <NRF24_csn+0x38>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <NRF24_csn+0x3c>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f002 f83c 	bl	8002f70 <HAL_GPIO_WritePin>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000ac 	.word	0x200000ac
 8000f04:	200000b0 	.word	0x200000b0

08000f08 <NRF24_ce>:

//2. Chip Enable
void NRF24_ce(int state)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <NRF24_ce+0x20>
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <NRF24_ce+0x38>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <NRF24_ce+0x3c>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	f002 f825 	bl	8002f70 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000f26:	e007      	b.n	8000f38 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <NRF24_ce+0x38>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <NRF24_ce+0x3c>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	f002 f81c 	bl	8002f70 <HAL_GPIO_WritePin>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	200000b2 	.word	0x200000b2

08000f48 <NRF24_read_register>:

//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ffb8 	bl	8000ec8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000f62:	f107 010c 	add.w	r1, r7, #12
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	2201      	movs	r2, #1
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <NRF24_read_register+0x4c>)
 8000f6c:	f003 fa2e 	bl	80043cc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	1c59      	adds	r1, r3, #1
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <NRF24_read_register+0x4c>)
 8000f7c:	f003 fb5a 	bl	8004634 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000f80:	7b7b      	ldrb	r3, [r7, #13]
 8000f82:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff ff9f 	bl	8000ec8 <NRF24_csn>
	return retData;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200000b4 	.word	0x200000b4

08000f98 <NRF24_read_registerN>:

//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff ff8d 	bl	8000ec8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000fb8:	f107 010c 	add.w	r1, r7, #12
 8000fbc:	2364      	movs	r3, #100	; 0x64
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <NRF24_read_registerN+0x4c>)
 8000fc2:	f003 fa03 	bl	80043cc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <NRF24_read_registerN+0x4c>)
 8000fd0:	f003 fb30 	bl	8004634 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff ff77 	bl	8000ec8 <NRF24_csn>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000b4 	.word	0x200000b4

08000fe8 <NRF24_write_register>:

//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff65 	bl	8000ec8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f043 0320 	orr.w	r3, r3, #32
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800100c:	f107 010c 	add.w	r1, r7, #12
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2202      	movs	r2, #2
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <NRF24_write_register+0x40>)
 8001016:	f003 f9d9 	bl	80043cc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff54 	bl	8000ec8 <NRF24_csn>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000b4 	.word	0x200000b4

0800102c <NRF24_write_registerN>:

//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ff43 	bl	8000ec8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	b2db      	uxtb	r3, r3
 800104a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	2201      	movs	r2, #1
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <NRF24_write_registerN+0x4c>)
 8001056:	f003 f9b9 	bl	80043cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	b29a      	uxth	r2, r3
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	6839      	ldr	r1, [r7, #0]
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <NRF24_write_registerN+0x4c>)
 8001064:	f003 f9b2 	bl	80043cc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff2d 	bl	8000ec8 <NRF24_csn>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000b4 	.word	0x200000b4

0800107c <NRF24_write_payload>:

//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ff1d 	bl	8000ec8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001092:	f107 010f 	add.w	r1, r7, #15
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	4808      	ldr	r0, [pc, #32]	; (80010bc <NRF24_write_payload+0x40>)
 800109c:	f003 f996 	bl	80043cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <NRF24_write_payload+0x40>)
 80010aa:	f003 f98f 	bl	80043cc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff ff0a 	bl	8000ec8 <NRF24_csn>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000b4 	.word	0x200000b4

080010c0 <NRF24_read_payload>:

//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80010cc:	f000 fa10 	bl	80014f0 <NRF24_getPayloadSize>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d303      	bcc.n	80010e2 <NRF24_read_payload+0x22>
 80010da:	f000 fa09 	bl	80014f0 <NRF24_getPayloadSize>
 80010de:	4603      	mov	r3, r0
 80010e0:	e000      	b.n	80010e4 <NRF24_read_payload+0x24>
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff feee 	bl	8000ec8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80010ec:	2361      	movs	r3, #97	; 0x61
 80010ee:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80010f0:	f107 010e 	add.w	r1, r7, #14
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	2201      	movs	r2, #1
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <NRF24_read_payload+0x5c>)
 80010fa:	f003 f967 	bl	80043cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	b29a      	uxth	r2, r3
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <NRF24_read_payload+0x5c>)
 8001108:	f003 fa94 	bl	8004634 <HAL_SPI_Receive>
	NRF24_csn(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff fedb 	bl	8000ec8 <NRF24_csn>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000b4 	.word	0x200000b4

08001120 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	20e1      	movs	r0, #225	; 0xe1
 8001128:	f7ff ff5e 	bl	8000fe8 <NRF24_write_register>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <NRF24_flush_rx>:

//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001134:	21ff      	movs	r1, #255	; 0xff
 8001136:	20e2      	movs	r0, #226	; 0xe2
 8001138:	f7ff ff56 	bl	8000fe8 <NRF24_write_register>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <NRF24_get_status>:

//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001146:	2007      	movs	r0, #7
 8001148:	f7ff fefe 	bl	8000f48 <NRF24_read_register>
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800115c:	b082      	sub	sp, #8
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001170:	4b65      	ldr	r3, [pc, #404]	; (8001308 <NRF24_begin+0x1ac>)
 8001172:	4618      	mov	r0, r3
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2258      	movs	r2, #88	; 0x58
 800117a:	4619      	mov	r1, r3
 800117c:	f003 fe40 	bl	8004e00 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001180:	4a62      	ldr	r2, [pc, #392]	; (800130c <NRF24_begin+0x1b0>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001186:	4a62      	ldr	r2, [pc, #392]	; (8001310 <NRF24_begin+0x1b4>)
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800118c:	4a61      	ldr	r2, [pc, #388]	; (8001314 <NRF24_begin+0x1b8>)
 800118e:	883b      	ldrh	r3, [r7, #0]
 8001190:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fe98 	bl	8000ec8 <NRF24_csn>
	NRF24_ce(0);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff feb5 	bl	8000f08 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800119e:	2005      	movs	r0, #5
 80011a0:	f001 f872 	bl	8002288 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80011a4:	2108      	movs	r1, #8
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ff1e 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80011ac:	213f      	movs	r1, #63	; 0x3f
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff1a 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80011b4:	2103      	movs	r1, #3
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff ff16 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80011bc:	2103      	movs	r1, #3
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff ff12 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80011c4:	2103      	movs	r1, #3
 80011c6:	2004      	movs	r0, #4
 80011c8:	f7ff ff0e 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80011cc:	2102      	movs	r1, #2
 80011ce:	2005      	movs	r0, #5
 80011d0:	f7ff ff0a 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80011d4:	210f      	movs	r1, #15
 80011d6:	2006      	movs	r0, #6
 80011d8:	f7ff ff06 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80011dc:	210e      	movs	r1, #14
 80011de:	2007      	movs	r0, #7
 80011e0:	f7ff ff02 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2008      	movs	r0, #8
 80011e8:	f7ff fefe 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2009      	movs	r0, #9
 80011f0:	f7ff fefa 	bl	8000fe8 <NRF24_write_register>

	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7;
 80011f4:	23e7      	movs	r3, #231	; 0xe7
 80011f6:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3]=0xE7;
 80011f8:	23e7      	movs	r3, #231	; 0xe7
 80011fa:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2]=0xE7;
 80011fc:	23e7      	movs	r3, #231	; 0xe7
 80011fe:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1]=0xE7;
 8001200:	23e7      	movs	r3, #231	; 0xe7
 8001202:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0]=0xE7;
 8001204:	23e7      	movs	r3, #231	; 0xe7
 8001206:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2205      	movs	r2, #5
 800120e:	4619      	mov	r1, r3
 8001210:	200a      	movs	r0, #10
 8001212:	f7ff ff0b 	bl	800102c <NRF24_write_registerN>

	pipeAddrVar[4]=0xC2;
 8001216:	23c2      	movs	r3, #194	; 0xc2
 8001218:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3]=0xC2;
 800121a:	23c2      	movs	r3, #194	; 0xc2
 800121c:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2]=0xC2;
 800121e:	23c2      	movs	r3, #194	; 0xc2
 8001220:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1]=0xC2;
 8001222:	23c2      	movs	r3, #194	; 0xc2
 8001224:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0]=0xC2;
 8001226:	23c2      	movs	r3, #194	; 0xc2
 8001228:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2205      	movs	r2, #5
 8001230:	4619      	mov	r1, r3
 8001232:	200b      	movs	r0, #11
 8001234:	f7ff fefa 	bl	800102c <NRF24_write_registerN>

	NRF24_write_register(0x0C, 0xC3);
 8001238:	21c3      	movs	r1, #195	; 0xc3
 800123a:	200c      	movs	r0, #12
 800123c:	f7ff fed4 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001240:	21c4      	movs	r1, #196	; 0xc4
 8001242:	200d      	movs	r0, #13
 8001244:	f7ff fed0 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001248:	21c5      	movs	r1, #197	; 0xc5
 800124a:	200e      	movs	r0, #14
 800124c:	f7ff fecc 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001250:	21c6      	movs	r1, #198	; 0xc6
 8001252:	200f      	movs	r0, #15
 8001254:	f7ff fec8 	bl	8000fe8 <NRF24_write_register>

	pipeAddrVar[4]=0xE7;
 8001258:	23e7      	movs	r3, #231	; 0xe7
 800125a:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3]=0xE7;
 800125c:	23e7      	movs	r3, #231	; 0xe7
 800125e:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2]=0xE7;
 8001260:	23e7      	movs	r3, #231	; 0xe7
 8001262:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1]=0xE7;
 8001264:	23e7      	movs	r3, #231	; 0xe7
 8001266:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0]=0xE7;
 8001268:	23e7      	movs	r3, #231	; 0xe7
 800126a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	2205      	movs	r2, #5
 8001272:	4619      	mov	r1, r3
 8001274:	2010      	movs	r0, #16
 8001276:	f7ff fed9 	bl	800102c <NRF24_write_registerN>

	NRF24_write_register(0x11, 0);
 800127a:	2100      	movs	r1, #0
 800127c:	2011      	movs	r0, #17
 800127e:	f7ff feb3 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001282:	2100      	movs	r1, #0
 8001284:	2012      	movs	r0, #18
 8001286:	f7ff feaf 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2013      	movs	r0, #19
 800128e:	f7ff feab 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	2014      	movs	r0, #20
 8001296:	f7ff fea7 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800129a:	2100      	movs	r1, #0
 800129c:	2015      	movs	r0, #21
 800129e:	f7ff fea3 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2016      	movs	r0, #22
 80012a6:	f7ff fe9f 	bl	8000fe8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80012aa:	f000 fb13 	bl	80018d4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80012ae:	2100      	movs	r1, #0
 80012b0:	201c      	movs	r0, #28
 80012b2:	f7ff fe99 	bl	8000fe8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80012b6:	2100      	movs	r1, #0
 80012b8:	201d      	movs	r0, #29
 80012ba:	f7ff fe95 	bl	8000fe8 <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80012be:	210f      	movs	r1, #15
 80012c0:	200f      	movs	r0, #15
 80012c2:	f000 f8cd 	bl	8001460 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f9b3 	bl	8001632 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f000 f9e9 	bl	80016a4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80012d2:	2002      	movs	r0, #2
 80012d4:	f000 fa2c 	bl	8001730 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80012d8:	f000 f97e 	bl	80015d8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80012dc:	2020      	movs	r0, #32
 80012de:	f000 f8ef 	bl	80014c0 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80012e2:	f000 faee 	bl	80018c2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80012e6:	204c      	movs	r0, #76	; 0x4c
 80012e8:	f000 f8d5 	bl	8001496 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80012ec:	f7ff ff18 	bl	8001120 <NRF24_flush_tx>
	NRF24_flush_rx();
 80012f0:	f7ff ff1e 	bl	8001130 <NRF24_flush_rx>

	NRF24_powerDown();
 80012f4:	f000 fa44 	bl	8001780 <NRF24_powerDown>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001302:	b002      	add	sp, #8
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200000b4 	.word	0x200000b4
 800130c:	200000ac 	.word	0x200000ac
 8001310:	200000b0 	.word	0x200000b0
 8001314:	200000b2 	.word	0x200000b2

08001318 <NRF24_stopListening>:
	NRF24_DelayMicroSeconds(150);
}

//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fdf3 	bl	8000f08 <NRF24_ce>
	NRF24_flush_tx();
 8001322:	f7ff fefd 	bl	8001120 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001326:	f7ff ff03 	bl	8001130 <NRF24_flush_rx>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800133c:	f000 fac1 	bl	80018c2 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fa5a 	bl	80017fe <NRF24_startWrite>
	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 800134a:	f000 ff91 	bl	8002270 <HAL_GetTick>
 800134e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001350:	230a      	movs	r3, #10
 8001352:	613b      	str	r3, [r7, #16]
	do
	{
		NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001354:	f107 030d 	add.w	r3, r7, #13
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	2008      	movs	r0, #8
 800135e:	f7ff fe1b 	bl	8000f98 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001362:	f7ff feed 	bl	8001140 <NRF24_get_status>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
	}
	while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <NRF24_write+0x54>
 8001374:	f000 ff7c 	bl	8002270 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8e7      	bhi.n	8001354 <NRF24_write+0x24>

	bool tx_ok, tx_fail;
	NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001384:	f107 010b 	add.w	r1, r7, #11
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <NRF24_write+0x90>)
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fa64 	bl	800185c <NRF24_whatHappened>
	//retStatus = tx_ok;
	retStatus = true;
 8001394:	2301      	movs	r3, #1
 8001396:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <NRF24_write+0x90>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <NRF24_write+0x7c>
	{
		ack_payload_length = NRF24_getDynamicPayloadSize();
 80013a0:	f000 f8b2 	bl	8001508 <NRF24_getDynamicPayloadSize>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <NRF24_write+0x94>)
 80013aa:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 80013ac:	f000 f80c 	bl	80013c8 <NRF24_available>
	NRF24_flush_tx();
 80013b0:	f7ff feb6 	bl	8001120 <NRF24_flush_tx>
	return retStatus;
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200000a4 	.word	0x200000a4
 80013c4:	200000a5 	.word	0x200000a5

080013c8 <NRF24_available>:

//16. Check for available data to read
bool NRF24_available(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 f9e6 	bl	800179e <NRF24_availablePipe>
 80013d2:	4603      	mov	r3, r0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	4619      	mov	r1, r3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe69 	bl	80010c0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80013ee:	2017      	movs	r0, #23
 80013f0:	f7ff fdaa 	bl	8000f48 <NRF24_read_register>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80013fc:	f7ff fe98 	bl	8001130 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001400:	f000 f882 	bl	8001508 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf14      	ite	ne
 800140a:	2301      	movne	r3, #1
 800140c:	2300      	moveq	r3, #0
 800140e:	b2db      	uxtb	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001422:	463b      	mov	r3, r7
 8001424:	2205      	movs	r2, #5
 8001426:	4619      	mov	r1, r3
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff fdff 	bl	800102c <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800142e:	463b      	mov	r3, r7
 8001430:	2205      	movs	r2, #5
 8001432:	4619      	mov	r1, r3
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff fdf9 	bl	800102c <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 800143a:	2320      	movs	r3, #32
 800143c:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <NRF24_openWritingPipe+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	4293      	cmp	r3, r2
 8001446:	bf28      	it	cs
 8001448:	4613      	movcs	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	2011      	movs	r0, #17
 8001450:	f7ff fdca 	bl	8000fe8 <NRF24_write_register>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000a6 	.word	0x200000a6

08001460 <NRF24_setRetries>:

}

//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	b25a      	sxtb	r2, r3
 8001476:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	2004      	movs	r0, #4
 800148a:	f7ff fdad 	bl	8000fe8 <NRF24_write_register>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80014a0:	237f      	movs	r3, #127	; 0x7f
 80014a2:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	bf28      	it	cs
 80014ac:	4613      	movcs	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	2005      	movs	r0, #5
 80014b4:	f7ff fd98 	bl	8000fe8 <NRF24_write_register>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80014ca:	2320      	movs	r3, #32
 80014cc:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size,max_payload_size);
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	bf28      	it	cs
 80014d6:	4613      	movcs	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <NRF24_setPayloadSize+0x2c>)
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200000a6 	.word	0x200000a6

080014f0 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	return payload_size;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <NRF24_getPayloadSize+0x14>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200000a6 	.word	0x200000a6

08001508 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800150c:	2060      	movs	r0, #96	; 0x60
 800150e:	f7ff fd1b 	bl	8000f48 <NRF24_read_register>
 8001512:	4603      	mov	r3, r0
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}

08001518 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800151c:	201d      	movs	r0, #29
 800151e:	f7ff fd13 	bl	8000f48 <NRF24_read_register>
 8001522:	4603      	mov	r3, r0
 8001524:	f043 0306 	orr.w	r3, r3, #6
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4619      	mov	r1, r3
 800152c:	201d      	movs	r0, #29
 800152e:	f7ff fd5b 	bl	8000fe8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001532:	201d      	movs	r0, #29
 8001534:	f7ff fd08 	bl	8000f48 <NRF24_read_register>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800153e:	f000 f9c9 	bl	80018d4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001542:	201d      	movs	r0, #29
 8001544:	f7ff fd00 	bl	8000f48 <NRF24_read_register>
 8001548:	4603      	mov	r3, r0
 800154a:	f043 0306 	orr.w	r3, r3, #6
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	201d      	movs	r0, #29
 8001554:	f7ff fd48 	bl	8000fe8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001558:	201c      	movs	r0, #28
 800155a:	f7ff fcf5 	bl	8000f48 <NRF24_read_register>
 800155e:	4603      	mov	r3, r0
 8001560:	f043 0303 	orr.w	r3, r3, #3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	201c      	movs	r0, #28
 800156a:	f7ff fd3d 	bl	8000fe8 <NRF24_write_register>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <NRF24_enableDynamicPayloads>:

//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001578:	201d      	movs	r0, #29
 800157a:	f7ff fce5 	bl	8000f48 <NRF24_read_register>
 800157e:	4603      	mov	r3, r0
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	201d      	movs	r0, #29
 800158a:	f7ff fd2d 	bl	8000fe8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800158e:	201d      	movs	r0, #29
 8001590:	f7ff fcda 	bl	8000f48 <NRF24_read_register>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800159a:	f000 f99b 	bl	80018d4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800159e:	201d      	movs	r0, #29
 80015a0:	f7ff fcd2 	bl	8000f48 <NRF24_read_register>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	201d      	movs	r0, #29
 80015b0:	f7ff fd1a 	bl	8000fe8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80015b4:	201c      	movs	r0, #28
 80015b6:	f7ff fcc7 	bl	8000f48 <NRF24_read_register>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4619      	mov	r1, r3
 80015c4:	201c      	movs	r0, #28
 80015c6:	f7ff fd0f 	bl	8000fe8 <NRF24_write_register>
	dynamic_payloads_enabled = true;
 80015ca:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <NRF24_enableDynamicPayloads+0x60>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000a7 	.word	0x200000a7

080015d8 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80015dc:	201d      	movs	r0, #29
 80015de:	f7ff fcb3 	bl	8000f48 <NRF24_read_register>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	201d      	movs	r0, #29
 80015ee:	f7ff fcfb 	bl	8000fe8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80015f2:	2100      	movs	r1, #0
 80015f4:	201c      	movs	r0, #28
 80015f6:	f7ff fcf7 	bl	8000fe8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80015fa:	4b02      	ldr	r3, [pc, #8]	; (8001604 <NRF24_disableDynamicPayloads+0x2c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200000a7 	.word	0x200000a7

08001608 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <NRF24_setAutoAck+0x1a>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8001618:	213f      	movs	r1, #63	; 0x3f
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fce4 	bl	8000fe8 <NRF24_write_register>
	else
		NRF24_write_register(REG_EN_AA, 0x00);
}
 8001620:	e003      	b.n	800162a <NRF24_setAutoAck+0x22>
		NRF24_write_register(REG_EN_AA, 0x00);
 8001622:	2100      	movs	r1, #0
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fcdf 	bl	8000fe8 <NRF24_write_register>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800163c:	2006      	movs	r0, #6
 800163e:	f7ff fc83 	bl	8000f48 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0306 	bic.w	r3, r3, #6
 800164c:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d104      	bne.n	800165e <NRF24_setPALevel+0x2c>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0306 	orr.w	r3, r3, #6
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e019      	b.n	8001692 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m6dB )
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d104      	bne.n	800166e <NRF24_setPALevel+0x3c>
	{
		setup |= _BV(RF_PWR_HIGH) ;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e011      	b.n	8001692 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m12dB )
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d104      	bne.n	800167e <NRF24_setPALevel+0x4c>
	{
		setup |= _BV(RF_PWR_LOW);
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	f043 0302 	orr.w	r3, r3, #2
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	e009      	b.n	8001692 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m18dB )
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <NRF24_setPALevel+0x60>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b04      	cmp	r3, #4
 8001688:	d103      	bne.n	8001692 <NRF24_setPALevel+0x60>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	f043 0306 	orr.w	r3, r3, #6
 8001690:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	4619      	mov	r1, r3
 8001696:	2006      	movs	r0, #6
 8001698:	f7ff fca6 	bl	8000fe8 <NRF24_write_register>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <NRF24_setDataRate>:
	return result ;
}

//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016b2:	2006      	movs	r0, #6
 80016b4:	f7ff fc48 	bl	8000f48 <NRF24_read_register>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <NRF24_setDataRate+0x88>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80016c8:	73bb      	strb	r3, [r7, #14]
	if( speed == RF24_250KBPS )
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d107      	bne.n	80016e0 <NRF24_setDataRate+0x3c>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false ;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <NRF24_setDataRate+0x88>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
		setup |= _BV( RF_DR_LOW ) ;
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	73bb      	strb	r3, [r7, #14]
 80016de:	e00d      	b.n	80016fc <NRF24_setDataRate+0x58>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <NRF24_setDataRate+0x52>
		{
			wide_band = true ;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <NRF24_setDataRate+0x88>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	73bb      	strb	r3, [r7, #14]
 80016f4:	e002      	b.n	80016fc <NRF24_setDataRate+0x58>
		}
		else
		{
			// 1Mbs
			wide_band = false ;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <NRF24_setDataRate+0x88>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	4619      	mov	r1, r3
 8001700:	2006      	movs	r0, #6
 8001702:	f7ff fc71 	bl	8000fe8 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001706:	2006      	movs	r0, #6
 8001708:	f7ff fc1e 	bl	8000f48 <NRF24_read_register>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	4293      	cmp	r3, r2
 8001714:	d102      	bne.n	800171c <NRF24_setDataRate+0x78>
	{
		result = true;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e002      	b.n	8001722 <NRF24_setDataRate+0x7e>
	}
	else
	{
		wide_band = false;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <NRF24_setDataRate+0x88>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000a8 	.word	0x200000a8

08001730 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fc04 	bl	8000f48 <NRF24_read_register>
 8001740:	4603      	mov	r3, r0
 8001742:	f023 030c 	bic.w	r3, r3, #12
 8001746:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <NRF24_setCRCLength+0x3e>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d104      	bne.n	800175e <NRF24_setCRCLength+0x2e>
	{
		config |= _BV(BIT_EN_CRC);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e007      	b.n	800176e <NRF24_setCRCLength+0x3e>
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	73fb      	strb	r3, [r7, #15]
		config |= _BV( BIT_CRCO );
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config );
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	4619      	mov	r1, r3
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fc38 	bl	8000fe8 <NRF24_write_register>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fbdf 	bl	8000f48 <NRF24_read_register>
 800178a:	4603      	mov	r3, r0
 800178c:	f023 0302 	bic.w	r3, r3, #2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4619      	mov	r1, r3
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fc27 	bl	8000fe8 <NRF24_write_register>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}

0800179e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80017a6:	f7ff fccb 	bl	8001140 <NRF24_get_status>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]

	bool result = ( status & _BV(BIT_RX_DR) );
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf14      	ite	ne
 80017b8:	2301      	movne	r3, #1
 80017ba:	2300      	moveq	r3, #0
 80017bc:	73bb      	strb	r3, [r7, #14]

	if (result)
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d017      	beq.n	80017f4 <NRF24_availablePipe+0x56>
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <NRF24_availablePipe+0x3c>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	2007      	movs	r0, #7
 80017de:	f7ff fc03 	bl	8000fe8 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <NRF24_availablePipe+0x56>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80017ec:	2120      	movs	r1, #32
 80017ee:	2007      	movs	r0, #7
 80017f0:	f7ff fbfa 	bl	8000fe8 <NRF24_write_register>
		}
	}
	return result;
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	NRF24_ce(0);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fb7c 	bl	8000f08 <NRF24_ce>
	//printConfigReg();
	NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fb99 	bl	8000f48 <NRF24_read_register>
 8001816:	4603      	mov	r3, r0
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fbde 	bl	8000fe8 <NRF24_write_register>
	NRF24_ce(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fb6b 	bl	8000f08 <NRF24_ce>
	NRF24_DelayMicroSeconds(150);
 8001832:	2096      	movs	r0, #150	; 0x96
 8001834:	f7ff fb28 	bl	8000e88 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload( buf, len );
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fc1d 	bl	800107c <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff fb60 	bl	8000f08 <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 8001848:	200f      	movs	r0, #15
 800184a:	f7ff fb1d 	bl	8000e88 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fb5a 	bl	8000f08 <NRF24_ce>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <NRF24_whatHappened>:
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001868:	f7ff fc6a 	bl	8001140 <NRF24_get_status>
 800186c:	4603      	mov	r3, r0
 800186e:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001876:	2170      	movs	r1, #112	; 0x70
 8001878:	2007      	movs	r0, #7
 800187a:	f7ff fbb5 	bl	8000fe8 <NRF24_write_register>
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b00      	cmp	r3, #0
 8001886:	bf14      	ite	ne
 8001888:	2301      	movne	r3, #1
 800188a:	2300      	moveq	r3, #0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	701a      	strb	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80018c6:	2170      	movs	r1, #112	; 0x70
 80018c8:	2007      	movs	r0, #7
 80018ca:	f7ff fb8d 	bl	8000fe8 <NRF24_write_register>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff faf4 	bl	8000ec8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80018e0:	2350      	movs	r3, #80	; 0x50
 80018e2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80018e4:	2373      	movs	r3, #115	; 0x73
 80018e6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80018e8:	1d39      	adds	r1, r7, #4
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2202      	movs	r2, #2
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <NRF24_ACTIVATE_cmd+0x30>)
 80018f0:	f002 fd6c 	bl	80043cc <HAL_SPI_Transmit>
	NRF24_csn(1);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff fae7 	bl	8000ec8 <NRF24_csn>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000b4 	.word	0x200000b4

08001908 <NRF24_transmitInit>:
}

//**********  TEAM OMNICAR - FUNCTIONS **********//

void NRF24_transmitInit(uint64_t add,uint8_t channel, uint8_t payload_size)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	460b      	mov	r3, r1
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	4613      	mov	r3, r2
 800191c:	71bb      	strb	r3, [r7, #6]
	NRF24_stopListening();														// Function call for stop the listening
 800191e:	f7ff fcfb 	bl	8001318 <NRF24_stopListening>
	NRF24_openWritingPipe(add);													// Function call for open writing pipe at the address pass in parameters of the function
 8001922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001926:	f7ff fd77 	bl	8001418 <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);														// Function call to set auto acknowledgment
 800192a:	2001      	movs	r0, #1
 800192c:	f7ff fe6c 	bl	8001608 <NRF24_setAutoAck>
	NRF24_setChannel(channel);													// Function call to set the channel RF pass in parameters of the function
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <NRF24_setChannel>
	NRF24_setPayloadSize(payload_size);											// Function call to set the payload size pass in parameters of the function
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fdc0 	bl	80014c0 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();												// Function call to enable dynamic payload
 8001940:	f7ff fe18 	bl	8001574 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();													// Function call to enable Ack payload
 8001944:	f7ff fde8 	bl	8001518 <NRF24_enableAckPayload>
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <NRF24_dataTransmission>:

void NRF24_dataTransmission(uint8_t *tab_Tx, uint8_t tab_Tx_size, uint8_t *tab_Ack, uint8_t tab_Ack_size)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	461a      	mov	r2, r3
 800195c:	460b      	mov	r3, r1
 800195e:	72fb      	strb	r3, [r7, #11]
 8001960:	4613      	mov	r3, r2
 8001962:	72bb      	strb	r3, [r7, #10]
	if (NRF24_write(tab_Tx, tab_Tx_size))										// Check if it is possible to write data
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	4619      	mov	r1, r3
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff fce1 	bl	8001330 <NRF24_write>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <NRF24_dataTransmission+0x2e>
	{
		NRF24_read(tab_Ack, tab_Ack_size);										// Function call to read ACK payload
 8001974:	7abb      	ldrb	r3, [r7, #10]
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fd2d 	bl	80013d8 <NRF24_read>
	}
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <ihm_joystick>:
#define MIN 853
static uint8_t batValue = 0;					// declaration of static data for Battery Value
static float batPercent = 0.0;					// declaration of static data for Battery Percentage

void ihm_joystick(ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2, uint8_t *tab)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	HAL_ADC_Start(hadc1);										// function call to start the ADC 1
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fcdd 	bl	8002354 <HAL_ADC_Start>
	HAL_ADC_Start(hadc2);										// function call to start the ADC 1
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f000 fcda 	bl	8002354 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(hadc1, 1) == HAL_OK)			// check if the conversion of ADC 1 is complete
 80019a0:	2101      	movs	r1, #1
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fd9c 	bl	80024e0 <HAL_ADC_PollForConversion>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <ihm_joystick+0x34>
	{
		VRx = HAL_ADC_GetValue(hadc1);							// VRx take the value converted of ADC 1
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fe1a 	bl	80025e8 <HAL_ADC_GetValue>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <ihm_joystick+0x178>)
 80019ba:	801a      	strh	r2, [r3, #0]
	}
	if(HAL_ADC_PollForConversion(hadc2, 1) == HAL_OK)			// check if the conversion of ADC 2 is complete
 80019bc:	2101      	movs	r1, #1
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f000 fd8e 	bl	80024e0 <HAL_ADC_PollForConversion>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <ihm_joystick+0x50>
	{
		VRy = HAL_ADC_GetValue(hadc2);							// VRy take the value converted of ADC 2
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f000 fe0c 	bl	80025e8 <HAL_ADC_GetValue>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <ihm_joystick+0x17c>)
 80019d6:	801a      	strh	r2, [r3, #0]
	}

	if(VRx >= 256 && VRx <= 768)								// check the value of VRx and VRy
 80019d8:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <ihm_joystick+0x178>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2bff      	cmp	r3, #255	; 0xff
 80019de:	d907      	bls.n	80019f0 <ihm_joystick+0x68>
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <ihm_joystick+0x178>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e8:	d802      	bhi.n	80019f0 <ihm_joystick+0x68>
	{
		neutral_areaX = true;									// pass neutral_areaX at true
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <ihm_joystick+0x180>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
	}

	if(VRy >= 256 && VRy <= 768)								// check the value of VRx and VRy
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <ihm_joystick+0x17c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	d907      	bls.n	8001a08 <ihm_joystick+0x80>
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <ihm_joystick+0x17c>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a00:	d802      	bhi.n	8001a08 <ihm_joystick+0x80>
	{
		neutral_areaY = true;									// pass neutral_areaX at true
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <ihm_joystick+0x184>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
	}


	if (VRx < 256 && neutral_areaY)								// check the value of VRx and VRy
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <ihm_joystick+0x178>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2bff      	cmp	r3, #255	; 0xff
 8001a0e:	d807      	bhi.n	8001a20 <ihm_joystick+0x98>
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <ihm_joystick+0x184>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <ihm_joystick+0x98>
	{
		tab[0] = 'B';											// store 'B' into the first case of tab
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2242      	movs	r2, #66	; 0x42
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e064      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if(VRx < 256 && VRy > 768)								// check the value of VRx and VRy
 8001a20:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <ihm_joystick+0x178>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2bff      	cmp	r3, #255	; 0xff
 8001a26:	d808      	bhi.n	8001a3a <ihm_joystick+0xb2>
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <ihm_joystick+0x17c>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a30:	d903      	bls.n	8001a3a <ihm_joystick+0xb2>
	{
		tab[0] = 'b';											// store 'b' into the first case of tab
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2262      	movs	r2, #98	; 0x62
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e057      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (neutral_areaX && VRy > 768)						// check the value of VRx and VRy
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <ihm_joystick+0x180>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <ihm_joystick+0xcc>
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <ihm_joystick+0x17c>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a4a:	d903      	bls.n	8001a54 <ihm_joystick+0xcc>
	{
		tab[0] = 'D';											// store 'D' into the first case of tab
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2244      	movs	r2, #68	; 0x44
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e04a      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (VRx > 768 && VRy > 768)							// check the value of VRx and VRy
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <ihm_joystick+0x178>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a5c:	d908      	bls.n	8001a70 <ihm_joystick+0xe8>
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <ihm_joystick+0x17c>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a66:	d903      	bls.n	8001a70 <ihm_joystick+0xe8>
	{
		tab[0] = 'a';											// store 'a' into the first case of tab
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2261      	movs	r2, #97	; 0x61
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e03c      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (VRx > 768 && neutral_areaY)						// check the value of VRx and VRy
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <ihm_joystick+0x178>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a78:	d907      	bls.n	8001a8a <ihm_joystick+0x102>
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <ihm_joystick+0x184>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <ihm_joystick+0x102>
	{
		tab[0] = 'H';											// store 'H' into the first case of tab
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2248      	movs	r2, #72	; 0x48
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e02f      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (neutral_areaX && neutral_areaY)					// check the value of VRx and VRy
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <ihm_joystick+0x180>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <ihm_joystick+0x11a>
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <ihm_joystick+0x184>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <ihm_joystick+0x11a>
	{
		tab[0] = 'N';											// store 'N' into the first case of tab
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	224e      	movs	r2, #78	; 0x4e
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e023      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (VRx > 768 && VRy < 256)							// check the value of VRx and VRy
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <ihm_joystick+0x178>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aaa:	d907      	bls.n	8001abc <ihm_joystick+0x134>
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <ihm_joystick+0x17c>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	2bff      	cmp	r3, #255	; 0xff
 8001ab2:	d803      	bhi.n	8001abc <ihm_joystick+0x134>
	{
		tab[0] = 'd';											// store 'd' into the first case of tab
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2264      	movs	r2, #100	; 0x64
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e016      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (neutral_areaX && VRy < 256)						// check the value of VRx and VRy
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <ihm_joystick+0x180>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <ihm_joystick+0x14c>
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <ihm_joystick+0x17c>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	2bff      	cmp	r3, #255	; 0xff
 8001aca:	d803      	bhi.n	8001ad4 <ihm_joystick+0x14c>
	{
		tab[0] = 'G';											// store 'G' into the first case of tab
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2247      	movs	r2, #71	; 0x47
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e00a      	b.n	8001aea <ihm_joystick+0x162>
	}
	else if (VRx < 256 && VRy < 256)							// check the value of VRx and VRy
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <ihm_joystick+0x178>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2bff      	cmp	r3, #255	; 0xff
 8001ada:	d806      	bhi.n	8001aea <ihm_joystick+0x162>
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <ihm_joystick+0x17c>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	2bff      	cmp	r3, #255	; 0xff
 8001ae2:	d802      	bhi.n	8001aea <ihm_joystick+0x162>
	{
		tab[0] = 'c';											// store 'c' into the first case of tab
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2263      	movs	r2, #99	; 0x63
 8001ae8:	701a      	strb	r2, [r3, #0]
	}

	neutral_areaX = false;										// pass neutral_areaX at false
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <ihm_joystick+0x180>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
	neutral_areaY = false;										// pass neutral_areaY at false
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <ihm_joystick+0x184>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000010c 	.word	0x2000010c
 8001b04:	2000010e 	.word	0x2000010e
 8001b08:	20000130 	.word	0x20000130
 8001b0c:	2000012f 	.word	0x2000012f

08001b10 <ihm_PWR_button>:

//2. POWER UPDATE
uint8_t ihm_PWR_button(GPIO_TypeDef *PWRPORT, uint16_t PWRUP_Pin, uint16_t PWRDOWN_Pin, uint8_t *tab)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	817b      	strh	r3, [r7, #10]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	813b      	strh	r3, [r7, #8]
	//Copy Pins and Port variables
	PWR_PORT = PWRPORT;                                                  // store into PWR_PORT the first argument passed to the function
 8001b22:	4a36      	ldr	r2, [pc, #216]	; (8001bfc <ihm_PWR_button+0xec>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6013      	str	r3, [r2, #0]
	PWR_UP_PIN = PWRUP_Pin;                                              // store into PWR_UP_PIN the second argument passed to the function
 8001b28:	4a35      	ldr	r2, [pc, #212]	; (8001c00 <ihm_PWR_button+0xf0>)
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	8013      	strh	r3, [r2, #0]
	PWR_DOWN_PIN = PWRDOWN_Pin;                                          // store into PWR_DOWN_PIN the third argument passed to the function
 8001b2e:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <ihm_PWR_button+0xf4>)
 8001b30:	893b      	ldrh	r3, [r7, #8]
 8001b32:	8013      	strh	r3, [r2, #0]

	//Read State Pin
	if (HAL_GPIO_ReadPin(PWR_PORT, PWR_UP_PIN) == GPIO_PIN_SET)          // check the state of PWR_UP_PIN
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <ihm_PWR_button+0xec>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <ihm_PWR_button+0xf0>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f001 f9fe 	bl	8002f40 <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d120      	bne.n	8001b8c <ihm_PWR_button+0x7c>
	{
		HAL_GPIO_TogglePin(PWR_PORT, PWR_UP_PIN);                        // call function to reverse the state of PWR_UP_PIN
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <ihm_PWR_button+0xec>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <ihm_PWR_button+0xf0>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f001 fa24 	bl	8002fa2 <HAL_GPIO_TogglePin>
		HAL_Delay(200);                                                  // delay of 200ms
 8001b5a:	20c8      	movs	r0, #200	; 0xc8
 8001b5c:	f000 fb94 	bl	8002288 <HAL_Delay>

		if(counter == 16)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d105      	bne.n	8001b74 <ihm_PWR_button+0x64>
		{                                               				 // check if the value of counter is equal to 16
			tab[1] = counter;                                            // store the value of the counter into the second case of tab
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e03c      	b.n	8001bee <ihm_PWR_button+0xde>
		}
		else
		{                                                           	 // check the value of counter
			counter += 4;                                                // add 4 to the value of the counter
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001b7e:	701a      	strb	r2, [r3, #0]
			tab[1] = counter;                                            // store the value of the counter into the second case of tab
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e030      	b.n	8001bee <ihm_PWR_button+0xde>
		}
	}
	else if (HAL_GPIO_ReadPin(PWR_PORT, PWR_DOWN_PIN) == GPIO_PIN_SET)   // check the state of PWR_DOWN_PIN
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <ihm_PWR_button+0xec>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <ihm_PWR_button+0xf4>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f001 f9d2 	bl	8002f40 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d120      	bne.n	8001be4 <ihm_PWR_button+0xd4>
	{
		HAL_GPIO_TogglePin(PWR_PORT, PWR_DOWN_PIN);                      // call function to reverse the state of PWR_DOWN_PIN
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <ihm_PWR_button+0xec>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <ihm_PWR_button+0xf4>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f001 f9f8 	bl	8002fa2 <HAL_GPIO_TogglePin>
		HAL_Delay(200);                                                  // delay of 200ms
 8001bb2:	20c8      	movs	r0, #200	; 0xc8
 8001bb4:	f000 fb68 	bl	8002288 <HAL_Delay>

		if(counter == 0)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <ihm_PWR_button+0xbc>
		{                                                				 // check if the value of counter is equal to 0
			tab[1] = counter;                                            // store the value of the counter into the second case of tab
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bc6:	7812      	ldrb	r2, [r2, #0]
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e010      	b.n	8001bee <ihm_PWR_button+0xde>
		}
		else
		{                                                           	 // check the value of counter
			counter -= 4;                                                // subtracted 4 to the value of the counter
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	3b04      	subs	r3, #4
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bd6:	701a      	strb	r2, [r3, #0]
			tab[1] = counter;                                            // store the value of the counter into the second case of tab
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e004      	b.n	8001bee <ihm_PWR_button+0xde>
		}
	}
	else
	{
		tab[1] = counter;                                            	  // store the value of the counter into the second case of tab
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	701a      	strb	r2, [r3, #0]
	}
	return counter;                                              		  // return value of the counter at main.c file
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <ihm_PWR_button+0xf8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000110 	.word	0x20000110
 8001c00:	20000114 	.word	0x20000114
 8001c04:	20000116 	.word	0x20000116
 8001c08:	2000012e 	.word	0x2000012e

08001c0c <ihm_ROTA_button>:

//3. ROTA BUTTON FUNCTION
void ihm_ROTA_button(GPIO_TypeDef *ROTAPORT, uint16_t ROTALEFT_Pin, uint16_t ROTARIGHT_Pin, uint8_t *tab)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	817b      	strh	r3, [r7, #10]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	813b      	strh	r3, [r7, #8]
	//Copy Pins and Port variables
	ROTA_PORT = ROTAPORT;														// store into ROTA_PORT the first argument passed to the function
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <ihm_ROTA_button+0x68>)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6013      	str	r3, [r2, #0]
	ROTA_LEFT_PIN = ROTALEFT_Pin;												// store into ROTA_LEFT_PIN the second argument passed to the function
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <ihm_ROTA_button+0x6c>)
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	8013      	strh	r3, [r2, #0]
	ROTA_RIGHT_PIN = ROTARIGHT_Pin;												// store into ROTA_RIGHT_PIN the third argument passed to the function
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <ihm_ROTA_button+0x70>)
 8001c2c:	893b      	ldrh	r3, [r7, #8]
 8001c2e:	8013      	strh	r3, [r2, #0]

	//Read State Pin
	if(HAL_GPIO_ReadPin(ROTA_PORT, ROTA_RIGHT_PIN) == GPIO_PIN_SET)				// check the state of ROTA_RIGHT_PIN
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <ihm_ROTA_button+0x68>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <ihm_ROTA_button+0x70>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f001 f980 	bl	8002f40 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d103      	bne.n	8001c4e <ihm_ROTA_button+0x42>
	{
		tab[0] = 'R';															// store 'R' into the first case of tab
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2252      	movs	r2, #82	; 0x52
 8001c4a:	701a      	strb	r2, [r3, #0]
	}
	else if(HAL_GPIO_ReadPin(ROTA_PORT, ROTA_LEFT_PIN) == GPIO_PIN_SET)			// check the state of ROTA_LEFT_PIN
	{
		tab[0] = 'L';															// store 'L' into the first case of tab
	}
}
 8001c4c:	e00d      	b.n	8001c6a <ihm_ROTA_button+0x5e>
	else if(HAL_GPIO_ReadPin(ROTA_PORT, ROTA_LEFT_PIN) == GPIO_PIN_SET)			// check the state of ROTA_LEFT_PIN
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <ihm_ROTA_button+0x68>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <ihm_ROTA_button+0x6c>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f001 f971 	bl	8002f40 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <ihm_ROTA_button+0x5e>
		tab[0] = 'L';															// store 'L' into the first case of tab
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	224c      	movs	r2, #76	; 0x4c
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000118 	.word	0x20000118
 8001c78:	2000011c 	.word	0x2000011c
 8001c7c:	2000011e 	.word	0x2000011e

08001c80 <ihm_buzzer_ON_OFF>:

//4. BUZZER ON OFF (IN OR OUT)
void ihm_buzzer_ON_OFF(GPIO_TypeDef *SWITCHPORT, uint16_t SWITCH_BUZZER_Pin, uint8_t *tab)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	817b      	strh	r3, [r7, #10]
	SWITCH_PORT = SWITCHPORT;									// store into SWITCH_PORT the first argument passed to the function
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <ihm_buzzer_ON_OFF+0x50>)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6013      	str	r3, [r2, #0]
	SWITCH_PIN = SWITCH_BUZZER_Pin;								// store into SWITCH_PIN the first argument passed to the function
 8001c94:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <ihm_buzzer_ON_OFF+0x54>)
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	8013      	strh	r3, [r2, #0]

	tab[2] = HAL_GPIO_ReadPin(SWITCH_PORT, SWITCH_PIN);			// store the state of SWITCH_PORT into the second case of tab
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <ihm_buzzer_ON_OFF+0x50>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <ihm_buzzer_ON_OFF+0x54>)
 8001ca0:	8819      	ldrh	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1c9c      	adds	r4, r3, #2
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f001 f94a 	bl	8002f40 <HAL_GPIO_ReadPin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	7023      	strb	r3, [r4, #0]

	if(tab[2] == 1)												// check if the third case of tab is equal to 1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d103      	bne.n	8001cc2 <ihm_buzzer_ON_OFF+0x42>
	{
		switch_on = true;										// pass switch_on at true
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <ihm_buzzer_ON_OFF+0x58>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		switch_on = false;										// pass switch_on at false
	}
}
 8001cc0:	e002      	b.n	8001cc8 <ihm_buzzer_ON_OFF+0x48>
		switch_on = false;										// pass switch_on at false
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <ihm_buzzer_ON_OFF+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	20000128 	.word	0x20000128
 8001cd4:	2000012c 	.word	0x2000012c
 8001cd8:	20000131 	.word	0x20000131

08001cdc <ihm_active_buzzer>:

//5. ACTIVE BUZZER (if it is activate with "buzzer_ON_OFF function"
void ihm_active_buzzer(GPIO_TypeDef *BUZZERPORT, uint16_t BUZZER_OT2_Pin, uint8_t *tab)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	817b      	strh	r3, [r7, #10]
	BUZZER_PORT = BUZZERPORT;											// store into BUZZER_PORT the first argument passed to the function
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <ihm_active_buzzer+0x70>)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6013      	str	r3, [r2, #0]
	BUZZER_PIN = BUZZER_OT2_Pin;										// store into BUZZER_PIN the second argument passed to the function
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <ihm_active_buzzer+0x74>)
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	8013      	strh	r3, [r2, #0]

	if (tab[2] == '1' && switch_on)										// check if the value of the third case of tab is equal at 1 AND if switch_on is true
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b31      	cmp	r3, #49	; 0x31
 8001cfe:	d10c      	bne.n	8001d1a <ihm_active_buzzer+0x3e>
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <ihm_active_buzzer+0x78>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <ihm_active_buzzer+0x3e>
	{
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);		// Transition to the high state of the pin (PIN SET)
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <ihm_active_buzzer+0x70>)
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <ihm_active_buzzer+0x74>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4619      	mov	r1, r3
 8001d14:	f001 f92c 	bl	8002f70 <HAL_GPIO_WritePin>
	}
	else if (tab[2] == '0' || !switch_on )								// check if the value of the third case of tab is equal at 0 OR switch_on is false
	{
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);		// Transition to the low" state of the pin
	}
}
 8001d18:	e013      	b.n	8001d42 <ihm_active_buzzer+0x66>
	else if (tab[2] == '0' || !switch_on )								// check if the value of the third case of tab is equal at 0 OR switch_on is false
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b30      	cmp	r3, #48	; 0x30
 8001d22:	d006      	beq.n	8001d32 <ihm_active_buzzer+0x56>
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <ihm_active_buzzer+0x78>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <ihm_active_buzzer+0x66>
		HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);		// Transition to the low" state of the pin
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <ihm_active_buzzer+0x70>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <ihm_active_buzzer+0x74>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f001 f917 	bl	8002f70 <HAL_GPIO_WritePin>
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000120 	.word	0x20000120
 8001d50:	20000124 	.word	0x20000124
 8001d54:	20000131 	.word	0x20000131

08001d58 <ihm_getBatteryLevel>:

uint8_t ihm_getBatteryLevel(ADC_HandleTypeDef *hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc);												 // call function to start the ADC
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 faf7 	bl	8002354 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(hadc, 1) == HAL_OK)					 // check if the conversion of ADC is complete
 8001d66:	2101      	movs	r1, #1
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fbb9 	bl	80024e0 <HAL_ADC_PollForConversion>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <ihm_getBatteryLevel+0x2a>
	{
		batValue = HAL_ADC_GetValue(hadc);								 // batValue take the converted value of ADC
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fc37 	bl	80025e8 <HAL_ADC_GetValue>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <ihm_getBatteryLevel+0x98>)
 8001d80:	701a      	strb	r2, [r3, #0]
	}

	//batPercent = 100 - (((MAX - (float)batValue)/ MAX - MIN)*100);	 // store the result of the equation in batPercent
	batPercent = ((MAX - (float)batValue)/ MAX - MIN)*100;				 // subtract the value of batPercent by 100
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <ihm_getBatteryLevel+0x98>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001df4 <ihm_getBatteryLevel+0x9c>
 8001d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d96:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001df4 <ihm_getBatteryLevel+0x9c>
 8001d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001df8 <ihm_getBatteryLevel+0xa0>
 8001da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001da6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001dfc <ihm_getBatteryLevel+0xa4>
 8001daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <ihm_getBatteryLevel+0xa8>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
	batPercent = (uint8_t)batPercent;									 // cast to integer the batPercent variable (float)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <ihm_getBatteryLevel+0xa8>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dbe:	edc7 7a00 	vstr	s15, [r7]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <ihm_getBatteryLevel+0xa8>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]

	return batPercent;													 // return value of the bat at main.c file
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <ihm_getBatteryLevel+0xa8>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dde:	edc7 7a00 	vstr	s15, [r7]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2db      	uxtb	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000132 	.word	0x20000132
 8001df4:	44800000 	.word	0x44800000
 8001df8:	44554000 	.word	0x44554000
 8001dfc:	42c80000 	.word	0x42c80000
 8001e00:	20000134 	.word	0x20000134

08001e04 <lcd_i2c_sendCommand>:
static I2C_HandleTypeDef lcd_i2cHandle;
static uint8_t LCD_I2C_SLAVE_ADDRESS = 0;				// declaration of static data for the Slave Address

/* SEND COMMAND */
void lcd_i2c_sendCommand(uint8_t command)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2] =																	// declaration of a table of 2 cells
 8001e0e:	2300      	movs	r3, #0
 8001e10:	733b      	strb	r3, [r7, #12]
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	737b      	strb	r3, [r7, #13]
	{
		0x00,																			// Control byte (0x00)
		command,																		// Command passed as parameter of the function
	};

	HAL_I2C_Master_Transmit(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS, tab, 2, 200);		// Transmit the table with I2C communication
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <lcd_i2c_sendCommand+0x30>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	f107 020c 	add.w	r2, r7, #12
 8001e20:	23c8      	movs	r3, #200	; 0xc8
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2302      	movs	r3, #2
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <lcd_i2c_sendCommand+0x34>)
 8001e28:	f001 fa0e 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000018c 	.word	0x2000018c
 8001e38:	20000138 	.word	0x20000138

08001e3c <lcd_i2c_sendData>:

/* SEND DATA */
void lcd_i2c_sendData(uint8_t data)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  uint8_t tab[2] =																		// Declaration of a table of 2 cells
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	733b      	strb	r3, [r7, #12]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	737b      	strb	r3, [r7, #13]
  {
		  0x40,																			// Control byte (0x40)
		  data,																			// Command passed as parameter of the function
  };
  HAL_I2C_Master_Transmit(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS, tab, 2, 200);			// Transmit the table with I2C communication
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <lcd_i2c_sendData+0x30>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b299      	uxth	r1, r3
 8001e54:	f107 020c 	add.w	r2, r7, #12
 8001e58:	23c8      	movs	r3, #200	; 0xc8
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <lcd_i2c_sendData+0x34>)
 8001e60:	f001 f9f2 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000018c 	.word	0x2000018c
 8001e70:	20000138 	.word	0x20000138

08001e74 <lcd_i2c_init>:

/* INIT */
bool lcd_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);																				// Delay of 50ms
 8001e7c:	2032      	movs	r0, #50	; 0x32
 8001e7e:	f000 fa03 	bl	8002288 <HAL_Delay>
	lcd_i2cHandle = *pI2cHandle;																// Store the struct managing the I2C
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <lcd_i2c_init+0x7c>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2354      	movs	r3, #84	; 0x54
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f002 ffb7 	bl	8004e00 <memcpy>
	if(HAL_I2C_IsDeviceReady(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)		// Check if the slave is not ready for communicate
 8001e92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e96:	2205      	movs	r2, #5
 8001e98:	2178      	movs	r1, #120	; 0x78
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <lcd_i2c_init+0x7c>)
 8001e9c:	f001 fad2 	bl	8003444 <HAL_I2C_IsDeviceReady>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <lcd_i2c_init+0x36>
	{
	return false;											// if it is not ready, return false (don't start the communication)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e01e      	b.n	8001ee8 <lcd_i2c_init+0x74>
	}
	else
	{
	LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;		// Store the value of the macro LCD_I2C_SLAVE_ADDRESS_0 (0x78) into LCD_I2C_SLAVE_ADDRESS
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <lcd_i2c_init+0x80>)
 8001eac:	2278      	movs	r2, #120	; 0x78
 8001eae:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(45);											// Delay of 45 ms
 8001eb0:	202d      	movs	r0, #45	; 0x2d
 8001eb2:	f000 f9e9 	bl	8002288 <HAL_Delay>
	lcd_i2c_sendCommand(LCD_FUNCTIONSET);					// Call function for send LCD_FUNCTIONSET
 8001eb6:	2038      	movs	r0, #56	; 0x38
 8001eb8:	f7ff ffa4 	bl	8001e04 <lcd_i2c_sendCommand>

	HAL_Delay(1);											// Delay of 1 ms
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f000 f9e3 	bl	8002288 <HAL_Delay>
	lcd_i2c_sendCommand(LCD_DISPLAYON);						// Call function for send LCD_DISPLAYON
 8001ec2:	200c      	movs	r0, #12
 8001ec4:	f7ff ff9e 	bl	8001e04 <lcd_i2c_sendCommand>

	HAL_Delay(1);											// Delay of 1 ms
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f000 f9dd 	bl	8002288 <HAL_Delay>
	lcd_i2c_sendCommand(LCD_CLEARDISPLAY);					// Call function for send LCD_CLEARDISPLAY
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff ff98 	bl	8001e04 <lcd_i2c_sendCommand>

	HAL_Delay(10);											// Delay of 10 ms
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f000 f9d7 	bl	8002288 <HAL_Delay>
	lcd_i2c_sendCommand(LCD_ENTRYMODESET);					// Call function for send LCD_ENTRYMODESET
 8001eda:	2006      	movs	r0, #6
 8001edc:	f7ff ff92 	bl	8001e04 <lcd_i2c_sendCommand>

	HAL_Delay(1);											// Delay of 1 ms
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f000 f9d1 	bl	8002288 <HAL_Delay>

	return true;											// Return true if the initialization of the LCD has been completed
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000138 	.word	0x20000138
 8001ef4:	2000018c 	.word	0x2000018c

08001ef8 <lcd_i2c_printf>:

void lcd_i2c_printf(const char* str, ...)
{
 8001ef8:	b40f      	push	{r0, r1, r2, r3}
 8001efa:	b590      	push	{r4, r7, lr}
 8001efc:	b089      	sub	sp, #36	; 0x24
 8001efe:	af00      	add	r7, sp, #0
  char stringArray[20];										// declaration of a array of 20 elements
  va_list args;												//
  va_start(args, str);										//
 8001f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f04:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);							//
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 ffa0 	bl	8004e54 <vsiprintf>
  va_end(args);												//
  for(uint8_t i=0; i<strlen(stringArray) && i<20; i++)		// condition made for "i" from 0 to 5
 8001f14:	2300      	movs	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
 8001f18:	e00b      	b.n	8001f32 <lcd_i2c_printf+0x3a>
  {
    lcd_i2c_sendData((uint8_t)stringArray[i]);				//
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	f107 0220 	add.w	r2, r7, #32
 8001f20:	4413      	add	r3, r2
 8001f22:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff88 	bl	8001e3c <lcd_i2c_sendData>
  for(uint8_t i=0; i<strlen(stringArray) && i<20; i++)		// condition made for "i" from 0 to 5
 8001f2c:	7ffb      	ldrb	r3, [r7, #31]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	77fb      	strb	r3, [r7, #31]
 8001f32:	7ffc      	ldrb	r4, [r7, #31]
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f949 	bl	80001d0 <strlen>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	429c      	cmp	r4, r3
 8001f42:	d202      	bcs.n	8001f4a <lcd_i2c_printf+0x52>
 8001f44:	7ffb      	ldrb	r3, [r7, #31]
 8001f46:	2b13      	cmp	r3, #19
 8001f48:	d9e7      	bls.n	8001f1a <lcd_i2c_printf+0x22>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f54:	b004      	add	sp, #16
 8001f56:	4770      	bx	lr

08001f58 <lcd_i2c_sendCommand_Add>:


void lcd_i2c_sendCommand_Add(uint8_t add)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	uint8_t address = LCD_SETDDRAMADDR | add;												// mask address passed in agurment with LCD_SETDDRAMADDR
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f68:	73fb      	strb	r3, [r7, #15]
	uint8_t tab[2] =																		// Declaration of a table of 2 cells
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	733b      	strb	r3, [r7, #12]
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	737b      	strb	r3, [r7, #13]
	{
			0x00,																			// Control byte (0x00)
			address,																		// Command passed as parameter of the function
	};
	HAL_I2C_Master_Transmit(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS, tab, 2, 200);			// Transmit the table with I2C communication
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <lcd_i2c_sendCommand_Add+0x38>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b299      	uxth	r1, r3
 8001f78:	f107 020c 	add.w	r2, r7, #12
 8001f7c:	23c8      	movs	r3, #200	; 0xc8
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2302      	movs	r3, #2
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <lcd_i2c_sendCommand_Add+0x3c>)
 8001f84:	f001 f960 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000018c 	.word	0x2000018c
 8001f94:	20000138 	.word	0x20000138

08001f98 <lcd_i2c_text_placement>:


/* AFFICHE TEXTE NE BOUGEANT PAS LORS DE L'UTILISATION*/
void lcd_i2c_text_placement()
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    lcd_i2c_printf("OT1:");												// function call for display 'OT1'
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <lcd_i2c_text_placement+0x64>)
 8001f9e:	f7ff ffab 	bl	8001ef8 <lcd_i2c_printf>
    lcd_i2c_sendCommand_Add(0x08);										// function call for move the cursor into a address passed a parameter (0x08)
 8001fa2:	2008      	movs	r0, #8
 8001fa4:	f7ff ffd8 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_sendData(0x25);												// function call for display '%'
 8001fa8:	2025      	movs	r0, #37	; 0x25
 8001faa:	f7ff ff47 	bl	8001e3c <lcd_i2c_sendData>
    lcd_i2c_sendCommand_Add(0x54);										// function call for move the cursor into a address passed a parameter (0x54)
 8001fae:	2054      	movs	r0, #84	; 0x54
 8001fb0:	f7ff ffd2 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_printf("OT2:");												// function call for display 'OT2'
 8001fb4:	4812      	ldr	r0, [pc, #72]	; (8002000 <lcd_i2c_text_placement+0x68>)
 8001fb6:	f7ff ff9f 	bl	8001ef8 <lcd_i2c_printf>
    lcd_i2c_sendCommand_Add(0x5C);										// function call for move the cursor into a address passed a parameter (0x5C)
 8001fba:	205c      	movs	r0, #92	; 0x5c
 8001fbc:	f7ff ffcc 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_sendData(0x25);												// function call for display '%'
 8001fc0:	2025      	movs	r0, #37	; 0x25
 8001fc2:	f7ff ff3b 	bl	8001e3c <lcd_i2c_sendData>
    lcd_i2c_sendCommand_Add(0x62);										// function call for move the cursor into a address passed a parameter (0x62)
 8001fc6:	2062      	movs	r0, #98	; 0x62
 8001fc8:	f7ff ffc6 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_printf("P:");												// function call for display 'P'
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <lcd_i2c_text_placement+0x6c>)
 8001fce:	f7ff ff93 	bl	8001ef8 <lcd_i2c_printf>
    lcd_i2c_sendCommand_Add(0x66);										// function call for move the cursor into a address passed a parameter (0x66)
 8001fd2:	2066      	movs	r0, #102	; 0x66
 8001fd4:	f7ff ffc0 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_printf("/4");												// function call for display '/4'
 8001fd8:	480b      	ldr	r0, [pc, #44]	; (8002008 <lcd_i2c_text_placement+0x70>)
 8001fda:	f7ff ff8d 	bl	8001ef8 <lcd_i2c_printf>
    lcd_i2c_sendCommand_Add(0x0C);										// function call for move the cursor into a address passed a parameter (0x0C)
 8001fde:	200c      	movs	r0, #12
 8001fe0:	f7ff ffba 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_printf("V:");												// function call for display 'V'
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <lcd_i2c_text_placement+0x74>)
 8001fe6:	f7ff ff87 	bl	8001ef8 <lcd_i2c_printf>
    lcd_i2c_sendCommand_Add(0x10);										// function call for move the cursor into a address passed a parameter (0x10)
 8001fea:	2010      	movs	r0, #16
 8001fec:	f7ff ffb4 	bl	8001f58 <lcd_i2c_sendCommand_Add>
    lcd_i2c_printf("KM/H");												// function call for display 'KM/H'
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <lcd_i2c_text_placement+0x78>)
 8001ff2:	f7ff ff81 	bl	8001ef8 <lcd_i2c_printf>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	08005638 	.word	0x08005638
 8002000:	08005640 	.word	0x08005640
 8002004:	08005648 	.word	0x08005648
 8002008:	0800564c 	.word	0x0800564c
 800200c:	08005650 	.word	0x08005650
 8002010:	08005654 	.word	0x08005654

08002014 <lcd_i2c_power_state>:

void lcd_i2c_power_state(uint8_t btn_state)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af02      	add	r7, sp, #8
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
	uint8_t address = LCD_SETDDRAMADDR | 0x65;							// mask address 0x65 with LCD_SETDDRAMADDR
 800201e:	23e5      	movs	r3, #229	; 0xe5
 8002020:	73fb      	strb	r3, [r7, #15]
	uint8_t tab[4] =													// declaration of a table of 4 cells
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	723b      	strb	r3, [r7, #8]
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	727b      	strb	r3, [r7, #9]
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	72bb      	strb	r3, [r7, #10]
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	72fb      	strb	r3, [r7, #11]
			address,													// command passed as parameter of the function
			0x40,								    					// control byte (0x40)
			btn_state,													// command passed as parameter of the function
	};

	switch(btn_state)
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b10      	cmp	r3, #16
 8002036:	d834      	bhi.n	80020a2 <lcd_i2c_power_state+0x8e>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <lcd_i2c_power_state+0x2c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002085 	.word	0x08002085
 8002044:	080020a3 	.word	0x080020a3
 8002048:	080020a3 	.word	0x080020a3
 800204c:	080020a3 	.word	0x080020a3
 8002050:	0800208b 	.word	0x0800208b
 8002054:	080020a3 	.word	0x080020a3
 8002058:	080020a3 	.word	0x080020a3
 800205c:	080020a3 	.word	0x080020a3
 8002060:	08002091 	.word	0x08002091
 8002064:	080020a3 	.word	0x080020a3
 8002068:	080020a3 	.word	0x080020a3
 800206c:	080020a3 	.word	0x080020a3
 8002070:	08002097 	.word	0x08002097
 8002074:	080020a3 	.word	0x080020a3
 8002078:	080020a3 	.word	0x080020a3
 800207c:	080020a3 	.word	0x080020a3
 8002080:	0800209d 	.word	0x0800209d
	{
		case 0: 	tab[3] = '0';										// If btn_state equal 0 ->  store 0 into the fourth case of tab
 8002084:	2330      	movs	r3, #48	; 0x30
 8002086:	72fb      	strb	r3, [r7, #11]
					break;
 8002088:	e00b      	b.n	80020a2 <lcd_i2c_power_state+0x8e>
		case 4: 	tab[3] = '1';										// If btn_state equal 4 ->  store 1 into the fourth case of tab
 800208a:	2331      	movs	r3, #49	; 0x31
 800208c:	72fb      	strb	r3, [r7, #11]
					break;
 800208e:	e008      	b.n	80020a2 <lcd_i2c_power_state+0x8e>
		case 8: 	tab[3] = '2';										// If btn_state equal 8 ->  store 2 into the fourth case of tab
 8002090:	2332      	movs	r3, #50	; 0x32
 8002092:	72fb      	strb	r3, [r7, #11]
					break;
 8002094:	e005      	b.n	80020a2 <lcd_i2c_power_state+0x8e>
		case 12: 	tab[3] = '3';										// If btn_state equal 12 -> store 3 into the fourth case of tab
 8002096:	2333      	movs	r3, #51	; 0x33
 8002098:	72fb      	strb	r3, [r7, #11]
					break;
 800209a:	e002      	b.n	80020a2 <lcd_i2c_power_state+0x8e>
		case 16: 	tab[3] = '4';										// If btn_state equal 16 -> store 4 into the fourth case of tab
 800209c:	2334      	movs	r3, #52	; 0x34
 800209e:	72fb      	strb	r3, [r7, #11]
					break;
 80020a0:	bf00      	nop
	}
	HAL_I2C_Master_Transmit(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS, tab, 4, 200);		// Transmit the table with I2C communication
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <lcd_i2c_power_state+0xac>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b299      	uxth	r1, r3
 80020a8:	f107 0208 	add.w	r2, r7, #8
 80020ac:	23c8      	movs	r3, #200	; 0xc8
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2304      	movs	r3, #4
 80020b2:	4804      	ldr	r0, [pc, #16]	; (80020c4 <lcd_i2c_power_state+0xb0>)
 80020b4:	f001 f8c8 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000018c 	.word	0x2000018c
 80020c4:	20000138 	.word	0x20000138

080020c8 <lcd_i2c_bat0T1_state>:


void lcd_i2c_bat0T1_state(uint8_t *tab_ack)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]
	uint8_t address = LCD_SETDDRAMADDR | 0x05;							// mask address 0x05 with LCD_SETDDRAMADDR
 80020d0:	2385      	movs	r3, #133	; 0x85
 80020d2:	73fb      	strb	r3, [r7, #15]
	uint8_t tab[4] =
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	723b      	strb	r3, [r7, #8]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	727b      	strb	r3, [r7, #9]
 80020dc:	2340      	movs	r3, #64	; 0x40
 80020de:	72bb      	strb	r3, [r7, #10]
	{
			0x80,														// control byte (0x80)
			address,													// address masked before
			0x40,														// control byte (0x40)
			(int)tab_ack[0],											// check battery data into tab_ack[0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
	uint8_t tab[4] =
 80020e4:	72fb      	strb	r3, [r7, #11]
	};

	HAL_I2C_Master_Transmit(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS, tab, 4, 200);		// Transmit the table with I2C communication
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <lcd_i2c_bat0T1_state+0x3c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b299      	uxth	r1, r3
 80020ec:	f107 0208 	add.w	r2, r7, #8
 80020f0:	23c8      	movs	r3, #200	; 0xc8
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2304      	movs	r3, #4
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <lcd_i2c_bat0T1_state+0x40>)
 80020f8:	f001 f8a6 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000018c 	.word	0x2000018c
 8002108:	20000138 	.word	0x20000138

0800210c <lcd_i2c_bat0T2_state>:

void lcd_i2c_bat0T2_state(uint8_t batOT2)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	uint8_t address = LCD_SETDDRAMADDR | 0x59;							// mask address 0x59 with LCD_SETDDRAMADDR
 8002116:	23d9      	movs	r3, #217	; 0xd9
 8002118:	73fb      	strb	r3, [r7, #15]
	uint8_t tab[4] =
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	723b      	strb	r3, [r7, #8]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	727b      	strb	r3, [r7, #9]
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	72bb      	strb	r3, [r7, #10]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	72fb      	strb	r3, [r7, #11]
			address,													// address masked before
			0x40,														// control byte (0x40)
			(int)batOT2,												// store battery percentage passed in parameters of the function
	};

	HAL_I2C_Master_Transmit(&lcd_i2cHandle, LCD_I2C_SLAVE_ADDRESS, tab, 4, 200);		// Transmit the table with I2C communication
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <lcd_i2c_bat0T2_state+0x3c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b299      	uxth	r1, r3
 8002130:	f107 0208 	add.w	r2, r7, #8
 8002134:	23c8      	movs	r3, #200	; 0xc8
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2304      	movs	r3, #4
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <lcd_i2c_bat0T2_state+0x40>)
 800213c:	f001 f884 	bl	8003248 <HAL_I2C_Master_Transmit>
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000018c 	.word	0x2000018c
 800214c:	20000138 	.word	0x20000138

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002156:	e003      	b.n	8002160 <LoopCopyDataInit>

08002158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800215a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800215c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800215e:	3104      	adds	r1, #4

08002160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002168:	d3f6      	bcc.n	8002158 <CopyDataInit>
  ldr  r2, =_sbss
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800216c:	e002      	b.n	8002174 <LoopFillZerobss>

0800216e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800216e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002170:	f842 3b04 	str.w	r3, [r2], #4

08002174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002178:	d3f9      	bcc.n	800216e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800217a:	f7fe fe6f 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217e:	f002 fe1b 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7fe f9fd 	bl	8000580 <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002188:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800218c:	080056b8 	.word	0x080056b8
  ldr  r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002194:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002198:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800219c:	200002e0 	.word	0x200002e0

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fce9 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7fe fc70 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fcf3 	bl	8002bf2 <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 fcc9 	bl	8002bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000000c 	.word	0x2000000c
 8002240:	20000014 	.word	0x20000014
 8002244:	20000010 	.word	0x20000010

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000014 	.word	0x20000014
 800226c:	200002d8 	.word	0x200002d8

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002d8 	.word	0x200002d8

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_Delay+0x40>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000014 	.word	0x20000014

080022cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e033      	b.n	800234a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fc0e 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa92 	bl	8002848 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
 800233a:	e001      	b.n	8002340 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e0a5      	b.n	80024ba <HAL_ADC_Start+0x166>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d018      	beq.n	80023b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002394:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <HAL_ADC_Start+0x174>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_ADC_Start+0x178>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d179      	bne.n	80024b8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	d106      	bne.n	8002412 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f023 0206 	bic.w	r2, r3, #6
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_ADC_Start+0x17c>)
 8002422:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800242c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b00      	cmp	r3, #0
 8002438:	d12a      	bne.n	8002490 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <HAL_ADC_Start+0x180>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d015      	beq.n	8002470 <HAL_ADC_Start+0x11c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_ADC_Start+0x184>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d105      	bne.n	800245a <HAL_ADC_Start+0x106>
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_ADC_Start+0x17c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_ADC_Start+0x188>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d129      	bne.n	80024b8 <HAL_ADC_Start+0x164>
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_ADC_Start+0x17c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d823      	bhi.n	80024b8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11c      	bne.n	80024b8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	e013      	b.n	80024b8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_ADC_Start+0x180>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10e      	bne.n	80024b8 <HAL_ADC_Start+0x164>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024b6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000000c 	.word	0x2000000c
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	40012300 	.word	0x40012300
 80024d4:	40012000 	.word	0x40012000
 80024d8:	40012100 	.word	0x40012100
 80024dc:	40012200 	.word	0x40012200

080024e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fc:	d113      	bne.n	8002526 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250c:	d10b      	bne.n	8002526 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e05c      	b.n	80025e0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002526:	f7ff fea3 	bl	8002270 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800252c:	e01a      	b.n	8002564 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d016      	beq.n	8002564 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_ADC_PollForConversion+0x6c>
 800253c:	f7ff fe98 	bl	8002270 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d20b      	bcs.n	8002564 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f043 0204 	orr.w	r2, r3, #4
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e03d      	b.n	80025e0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d1dd      	bne.n	800252e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f06f 0212 	mvn.w	r2, #18
 800257a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d123      	bne.n	80025de <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11f      	bne.n	80025de <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d111      	bne.n	80025de <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e105      	b.n	800282c <HAL_ADC_ConfigChannel+0x228>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b09      	cmp	r3, #9
 800262e:	d925      	bls.n	800267c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68d9      	ldr	r1, [r3, #12]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	3b1e      	subs	r3, #30
 8002646:	2207      	movs	r2, #7
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	4603      	mov	r3, r0
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4403      	add	r3, r0
 800266e:	3b1e      	subs	r3, #30
 8002670:	409a      	lsls	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	e022      	b.n	80026c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6919      	ldr	r1, [r3, #16]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	2207      	movs	r2, #7
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4403      	add	r3, r0
 80026b8:	409a      	lsls	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d824      	bhi.n	8002714 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b05      	subs	r3, #5
 80026dc:	221f      	movs	r2, #31
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b05      	subs	r3, #5
 8002706:	fa00 f203 	lsl.w	r2, r0, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
 8002712:	e04c      	b.n	80027ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	d824      	bhi.n	8002766 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b23      	subs	r3, #35	; 0x23
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43da      	mvns	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b23      	subs	r3, #35	; 0x23
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
 8002764:	e023      	b.n	80027ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b41      	subs	r3, #65	; 0x41
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b41      	subs	r3, #65	; 0x41
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_ADC_ConfigChannel+0x234>)
 80027b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_ADC_ConfigChannel+0x238>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1cc>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_ADC_ConfigChannel+0x238>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d123      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x21e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d003      	beq.n	80027ea <HAL_ADC_ConfigChannel+0x1e6>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b11      	cmp	r3, #17
 80027e8:	d11b      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d111      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_ADC_ConfigChannel+0x23c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_ADC_ConfigChannel+0x240>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	0c9a      	lsrs	r2, r3, #18
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002814:	e002      	b.n	800281c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3b01      	subs	r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f9      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40012300 	.word	0x40012300
 800283c:	40012000 	.word	0x40012000
 8002840:	2000000c 	.word	0x2000000c
 8002844:	431bde83 	.word	0x431bde83

08002848 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002850:	4b79      	ldr	r3, [pc, #484]	; (8002a38 <ADC_Init+0x1f0>)
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <ADC_Init+0x1f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6899      	ldr	r1, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e00f      	b.n	8002946 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002944:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0202 	bic.w	r2, r2, #2
 8002954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7e1b      	ldrb	r3, [r3, #24]
 8002960:	005a      	lsls	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002982:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002992:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	3b01      	subs	r3, #1
 80029a0:	035a      	lsls	r2, r3, #13
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	e007      	b.n	80029bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	051a      	lsls	r2, r3, #20
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029fe:	025a      	lsls	r2, r3, #9
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	029a      	lsls	r2, r3, #10
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40012300 	.word	0x40012300
 8002a3c:	0f000001 	.word	0x0f000001

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db0a      	blt.n	8002ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	490c      	ldr	r1, [pc, #48]	; (8002af0 <__NVIC_SetPriority+0x4c>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002acc:	e00a      	b.n	8002ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4908      	ldr	r1, [pc, #32]	; (8002af4 <__NVIC_SetPriority+0x50>)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b04      	subs	r3, #4
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	761a      	strb	r2, [r3, #24]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f1c3 0307 	rsb	r3, r3, #7
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	bf28      	it	cs
 8002b16:	2304      	movcs	r3, #4
 8002b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d902      	bls.n	8002b28 <NVIC_EncodePriority+0x30>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3b03      	subs	r3, #3
 8002b26:	e000      	b.n	8002b2a <NVIC_EncodePriority+0x32>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	4313      	orrs	r3, r2
         );
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	; 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f7ff ff8e 	bl	8002aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff47 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff ff5c 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff8e 	bl	8002af8 <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5d 	bl	8002aa4 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffb0 	bl	8002b60 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	; 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e16b      	b.n	8002f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 815a 	bne.w	8002efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d00b      	beq.n	8002c66 <HAL_GPIO_Init+0x5a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b12      	cmp	r3, #18
 8002c64:	d130      	bne.n	8002cc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 0201 	and.w	r2, r3, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0xfc>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b12      	cmp	r3, #18
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b4 	beq.w	8002efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_GPIO_Init+0x308>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a5e      	ldr	r2, [pc, #376]	; (8002f14 <HAL_GPIO_Init+0x308>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <HAL_GPIO_Init+0x308>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dae:	4a5a      	ldr	r2, [pc, #360]	; (8002f18 <HAL_GPIO_Init+0x30c>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a51      	ldr	r2, [pc, #324]	; (8002f1c <HAL_GPIO_Init+0x310>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d02b      	beq.n	8002e32 <HAL_GPIO_Init+0x226>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <HAL_GPIO_Init+0x314>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d025      	beq.n	8002e2e <HAL_GPIO_Init+0x222>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4f      	ldr	r2, [pc, #316]	; (8002f24 <HAL_GPIO_Init+0x318>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01f      	beq.n	8002e2a <HAL_GPIO_Init+0x21e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_GPIO_Init+0x31c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x21a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4d      	ldr	r2, [pc, #308]	; (8002f2c <HAL_GPIO_Init+0x320>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x216>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <HAL_GPIO_Init+0x324>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x212>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_GPIO_Init+0x328>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_GPIO_Init+0x32c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x20a>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e00e      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e16:	2308      	movs	r3, #8
 8002e18:	e00c      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	e00a      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e1e:	2305      	movs	r3, #5
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e32:	2300      	movs	r3, #0
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f002 0203 	and.w	r2, r2, #3
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4093      	lsls	r3, r2
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e44:	4934      	ldr	r1, [pc, #208]	; (8002f18 <HAL_GPIO_Init+0x30c>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e52:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e76:	4a31      	ldr	r2, [pc, #196]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea0:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef4:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <HAL_GPIO_Init+0x330>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	f67f ae90 	bls.w	8002c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3724      	adds	r7, #36	; 0x24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40021400 	.word	0x40021400
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021c00 	.word	0x40021c00
 8002f3c:	40013c00 	.word	0x40013c00

08002f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e001      	b.n	8002f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	887b      	ldrh	r3, [r7, #2]
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d104      	bne.n	8002fc6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	041a      	lsls	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e11f      	b.n	800322a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fe16 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	; 0x24
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800303c:	f001 f94e 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 8003040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4a7b      	ldr	r2, [pc, #492]	; (8003234 <HAL_I2C_Init+0x25c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d807      	bhi.n	800305c <HAL_I2C_Init+0x84>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <HAL_I2C_Init+0x260>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e006      	b.n	800306a <HAL_I2C_Init+0x92>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a77      	ldr	r2, [pc, #476]	; (800323c <HAL_I2C_Init+0x264>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0db      	b.n	800322a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a72      	ldr	r2, [pc, #456]	; (8003240 <HAL_I2C_Init+0x268>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9b      	lsrs	r3, r3, #18
 800307c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a64      	ldr	r2, [pc, #400]	; (8003234 <HAL_I2C_Init+0x25c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d802      	bhi.n	80030ac <HAL_I2C_Init+0xd4>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3301      	adds	r3, #1
 80030aa:	e009      	b.n	80030c0 <HAL_I2C_Init+0xe8>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a63      	ldr	r2, [pc, #396]	; (8003244 <HAL_I2C_Init+0x26c>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	3301      	adds	r3, #1
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4956      	ldr	r1, [pc, #344]	; (8003234 <HAL_I2C_Init+0x25c>)
 80030dc:	428b      	cmp	r3, r1
 80030de:	d80d      	bhi.n	80030fc <HAL_I2C_Init+0x124>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e59      	subs	r1, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	bf38      	it	cc
 80030f8:	2304      	movcc	r3, #4
 80030fa:	e04f      	b.n	800319c <HAL_I2C_Init+0x1c4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <HAL_I2C_Init+0x150>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e012      	b.n	800314e <HAL_I2C_Init+0x176>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x17e>
 8003152:	2301      	movs	r3, #1
 8003154:	e022      	b.n	800319c <HAL_I2C_Init+0x1c4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <HAL_I2C_Init+0x1a4>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e58      	subs	r0, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	440b      	add	r3, r1
 800316c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	e00f      	b.n	800319c <HAL_I2C_Init+0x1c4>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6809      	ldr	r1, [r1, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6911      	ldr	r1, [r2, #16]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	4311      	orrs	r1, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	430b      	orrs	r3, r1
 80031de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	000186a0 	.word	0x000186a0
 8003238:	001e847f 	.word	0x001e847f
 800323c:	003d08ff 	.word	0x003d08ff
 8003240:	431bde83 	.word	0x431bde83
 8003244:	10624dd3 	.word	0x10624dd3

08003248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	460b      	mov	r3, r1
 8003256:	817b      	strh	r3, [r7, #10]
 8003258:	4613      	mov	r3, r2
 800325a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff f808 	bl	8002270 <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	f040 80e0 	bne.w	8003430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	4970      	ldr	r1, [pc, #448]	; (800343c <HAL_I2C_Master_Transmit+0x1f4>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa92 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
 8003288:	e0d3      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2C_Master_Transmit+0x50>
 8003294:	2302      	movs	r3, #2
 8003296:	e0cc      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d007      	beq.n	80032be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	893a      	ldrh	r2, [r7, #8]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a50      	ldr	r2, [pc, #320]	; (8003440 <HAL_I2C_Master_Transmit+0x1f8>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f9ca 	bl	80036a0 <I2C_MasterRequestWrite>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e08d      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800332c:	e066      	b.n	80033fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fb0c 	bl	8003950 <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06b      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x188>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d017      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	6a39      	ldr	r1, [r7, #32]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fafc 	bl	80039d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d107      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e01a      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d194      	bne.n	800332e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	00100002 	.word	0x00100002
 8003440:	ffff0000 	.word	0xffff0000

08003444 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	460b      	mov	r3, r1
 8003452:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7fe ff0c 	bl	8002270 <HAL_GetTick>
 8003458:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	f040 8111 	bne.w	800368e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	4988      	ldr	r1, [pc, #544]	; (8003698 <HAL_I2C_IsDeviceReady+0x254>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f994 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e104      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_IsDeviceReady+0x50>
 8003490:	2302      	movs	r3, #2
 8003492:	e0fd      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d007      	beq.n	80034ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2224      	movs	r2, #36	; 0x24
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a70      	ldr	r2, [pc, #448]	; (800369c <HAL_I2C_IsDeviceReady+0x258>)
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f952 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003514:	d103      	bne.n	800351e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0b6      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003530:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe fe9d 	bl	8002270 <HAL_GetTick>
 8003536:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003566:	e025      	b.n	80035b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe fe82 	bl	8002270 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <HAL_I2C_IsDeviceReady+0x13a>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22a0      	movs	r2, #160	; 0xa0
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2ba0      	cmp	r3, #160	; 0xa0
 80035be:	d005      	beq.n	80035cc <HAL_I2C_IsDeviceReady+0x188>
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_I2C_IsDeviceReady+0x188>
 80035c6:	7dbb      	ldrb	r3, [r7, #22]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0cd      	beq.n	8003568 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d129      	bne.n	8003636 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2319      	movs	r3, #25
 800360e:	2201      	movs	r2, #1
 8003610:	4921      	ldr	r1, [pc, #132]	; (8003698 <HAL_I2C_IsDeviceReady+0x254>)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f8c6 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e036      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e02c      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800364e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2319      	movs	r3, #25
 8003656:	2201      	movs	r2, #1
 8003658:	490f      	ldr	r1, [pc, #60]	; (8003698 <HAL_I2C_IsDeviceReady+0x254>)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8a2 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e012      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3301      	adds	r3, #1
 800366e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	f4ff af32 	bcc.w	80034de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00100002 	.word	0x00100002
 800369c:	ffff0000 	.word	0xffff0000

080036a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	460b      	mov	r3, r1
 80036ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d006      	beq.n	80036ca <I2C_MasterRequestWrite+0x2a>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d003      	beq.n	80036ca <I2C_MasterRequestWrite+0x2a>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c8:	d108      	bne.n	80036dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e00b      	b.n	80036f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b12      	cmp	r3, #18
 80036e2:	d107      	bne.n	80036f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f84f 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d103      	bne.n	8003724 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e035      	b.n	8003794 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003730:	d108      	bne.n	8003744 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003740:	611a      	str	r2, [r3, #16]
 8003742:	e01b      	b.n	800377c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030f 	orn	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	490e      	ldr	r1, [pc, #56]	; (800379c <I2C_MasterRequestWrite+0xfc>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f875 	bl	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e010      	b.n	8003794 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003772:	897b      	ldrh	r3, [r7, #10]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4907      	ldr	r1, [pc, #28]	; (80037a0 <I2C_MasterRequestWrite+0x100>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f865 	bl	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	00010008 	.word	0x00010008
 80037a0:	00010002 	.word	0x00010002

080037a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	e025      	b.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d021      	beq.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fe fd57 	bl	8002270 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e023      	b.n	800384a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10d      	bne.n	8003828 <I2C_WaitOnFlagUntilTimeout+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	e00c      	b.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	429a      	cmp	r2, r3
 8003846:	d0b6      	beq.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003860:	e051      	b.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003870:	d123      	bne.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e046      	b.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d021      	beq.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe fcd5 	bl	8002270 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e020      	b.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10c      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4013      	ands	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e00b      	b.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d18d      	bne.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395c:	e02d      	b.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f878 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02d      	b.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d021      	beq.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fe fc7b 	bl	8002270 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d1ca      	bne.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039de:	e02d      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f837 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e02d      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d021      	beq.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f8:	f7fe fc3a 	bl	8002270 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d1ca      	bne.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d11b      	bne.n	8003aa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e25b      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d075      	beq.n	8003bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad2:	4ba3      	ldr	r3, [pc, #652]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d00c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ade:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d112      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aea:	4b9d      	ldr	r3, [pc, #628]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b99      	ldr	r3, [pc, #612]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d157      	bne.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e236      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x74>
 8003b1a:	4b91      	ldr	r3, [pc, #580]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a90      	ldr	r2, [pc, #576]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a8a      	ldr	r2, [pc, #552]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a87      	ldr	r2, [pc, #540]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	4b84      	ldr	r3, [pc, #528]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a83      	ldr	r2, [pc, #524]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a80      	ldr	r2, [pc, #512]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fb80 	bl	8002270 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe fb7c 	bl	8002270 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1fb      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fb6c 	bl	8002270 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fb68 	bl	8002270 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1e7      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	4b6c      	ldr	r3, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bca:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b5c      	ldr	r3, [pc, #368]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1bb      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4952      	ldr	r1, [pc, #328]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e03a      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <HAL_RCC_OscConfig+0x2b0>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fe fb21 	bl	8002270 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fe fb1d 	bl	8002270 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e19c      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4940      	ldr	r1, [pc, #256]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <HAL_RCC_OscConfig+0x2b0>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fb00 	bl	8002270 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fe fafc 	bl	8002270 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e17b      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d030      	beq.n	8003d00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_RCC_OscConfig+0x2b4>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe fae0 	bl	8002270 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fadc 	bl	8002270 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e15b      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x200>
 8003cd2:	e015      	b.n	8003d00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCC_OscConfig+0x2b4>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fac9 	bl	8002270 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe fac5 	bl	8002270 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e144      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80a0 	beq.w	8003e4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_OscConfig+0x2b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d121      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <HAL_RCC_OscConfig+0x2b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <HAL_RCC_OscConfig+0x2b8>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d56:	f7fe fa8b 	bl	8002270 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	e011      	b.n	8003d82 <HAL_RCC_OscConfig+0x2ce>
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	42470000 	.word	0x42470000
 8003d68:	42470e80 	.word	0x42470e80
 8003d6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fe fa7e 	bl	8002270 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0fd      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	4b81      	ldr	r3, [pc, #516]	; (8003f88 <HAL_RCC_OscConfig+0x4d4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d106      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
 8003d96:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e01c      	b.n	8003dde <HAL_RCC_OscConfig+0x32a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x312>
 8003dac:	4b77      	ldr	r3, [pc, #476]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a76      	ldr	r2, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	4b74      	ldr	r3, [pc, #464]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4a73      	ldr	r2, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e00b      	b.n	8003dde <HAL_RCC_OscConfig+0x32a>
 8003dc6:	4b71      	ldr	r3, [pc, #452]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a70      	ldr	r2, [pc, #448]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b6e      	ldr	r3, [pc, #440]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a6d      	ldr	r2, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe fa43 	bl	8002270 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fa3f 	bl	8002270 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0bc      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCC_OscConfig+0x33a>
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fe fa2d 	bl	8002270 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fa29 	bl	8002270 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0a6      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e30:	4b56      	ldr	r3, [pc, #344]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a51      	ldr	r2, [pc, #324]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8092 	beq.w	8003f7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e58:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d05c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d141      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b48      	ldr	r3, [pc, #288]	; (8003f90 <HAL_RCC_OscConfig+0x4dc>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe f9fd 	bl	8002270 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7a:	f7fe f9f9 	bl	8002270 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e078      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8c:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f0      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	019b      	lsls	r3, r3, #6
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	061b      	lsls	r3, r3, #24
 8003ebc:	4933      	ldr	r1, [pc, #204]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_RCC_OscConfig+0x4dc>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe f9d2 	bl	8002270 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe f9ce 	bl	8002270 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e04d      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x41c>
 8003eee:	e045      	b.n	8003f7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_OscConfig+0x4dc>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f9bb 	bl	8002270 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fe f9b7 	bl	8002270 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e036      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x44a>
 8003f1c:	e02e      	b.n	8003f7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e029      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_RCC_OscConfig+0x4d8>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d115      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10d      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d106      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	42470060 	.word	0x42470060

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cc      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d044      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d119      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d003      	beq.n	8004052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404e:	2b03      	cmp	r3, #3
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e067      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4934      	ldr	r1, [pc, #208]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004084:	f7fe f8f4 	bl	8002270 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fe f8f0 	bl	8002270 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e04f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 020c 	and.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1eb      	bne.n	800408c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d20c      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4601      	mov	r1, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	fa21 f303 	lsr.w	r3, r1, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe f854 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	0800565c 	.word	0x0800565c
 8004158:	2000000c 	.word	0x2000000c
 800415c:	20000010 	.word	0x20000010

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	2300      	movs	r3, #0
 8004170:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004176:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b04      	cmp	r3, #4
 8004180:	d007      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x32>
 8004182:	2b08      	cmp	r3, #8
 8004184:	d008      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x38>
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 808d 	bne.w	80042a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800418e:	60bb      	str	r3, [r7, #8]
       break;
 8004190:	e08c      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004192:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004194:	60bb      	str	r3, [r7, #8]
      break;
 8004196:	e089      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004198:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a2:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d023      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ae:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	f04f 0400 	mov.w	r4, #0
 80041b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	ea03 0501 	and.w	r5, r3, r1
 80041c4:	ea04 0602 	and.w	r6, r4, r2
 80041c8:	4a3d      	ldr	r2, [pc, #244]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ca:	fb02 f106 	mul.w	r1, r2, r6
 80041ce:	2200      	movs	r2, #0
 80041d0:	fb02 f205 	mul.w	r2, r2, r5
 80041d4:	440a      	add	r2, r1
 80041d6:	493a      	ldr	r1, [pc, #232]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041d8:	fba5 0101 	umull	r0, r1, r5, r1
 80041dc:	1853      	adds	r3, r2, r1
 80041de:	4619      	mov	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f04f 0400 	mov.w	r4, #0
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	f7fc f849 	bl	8000280 <__aeabi_uldivmod>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e049      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f6:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	f04f 0400 	mov.w	r4, #0
 8004200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	ea03 0501 	and.w	r5, r3, r1
 800420c:	ea04 0602 	and.w	r6, r4, r2
 8004210:	4629      	mov	r1, r5
 8004212:	4632      	mov	r2, r6
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	f04f 0400 	mov.w	r4, #0
 800421c:	0154      	lsls	r4, r2, #5
 800421e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004222:	014b      	lsls	r3, r1, #5
 8004224:	4619      	mov	r1, r3
 8004226:	4622      	mov	r2, r4
 8004228:	1b49      	subs	r1, r1, r5
 800422a:	eb62 0206 	sbc.w	r2, r2, r6
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	0194      	lsls	r4, r2, #6
 8004238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800423c:	018b      	lsls	r3, r1, #6
 800423e:	1a5b      	subs	r3, r3, r1
 8004240:	eb64 0402 	sbc.w	r4, r4, r2
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	00e2      	lsls	r2, r4, #3
 800424e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004252:	00d9      	lsls	r1, r3, #3
 8004254:	460b      	mov	r3, r1
 8004256:	4614      	mov	r4, r2
 8004258:	195b      	adds	r3, r3, r5
 800425a:	eb44 0406 	adc.w	r4, r4, r6
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	02a2      	lsls	r2, r4, #10
 8004268:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800426c:	0299      	lsls	r1, r3, #10
 800426e:	460b      	mov	r3, r1
 8004270:	4614      	mov	r4, r2
 8004272:	4618      	mov	r0, r3
 8004274:	4621      	mov	r1, r4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f04f 0400 	mov.w	r4, #0
 800427c:	461a      	mov	r2, r3
 800427e:	4623      	mov	r3, r4
 8004280:	f7fb fffe 	bl	8000280 <__aeabi_uldivmod>
 8004284:	4603      	mov	r3, r0
 8004286:	460c      	mov	r4, r1
 8004288:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	3301      	adds	r3, #1
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	60bb      	str	r3, [r7, #8]
      break;
 80042a4:	e002      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80042a8:	60bb      	str	r3, [r7, #8]
      break;
 80042aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ac:	68bb      	ldr	r3, [r7, #8]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	017d7840 	.word	0x017d7840

080042c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	2000000c 	.word	0x2000000c

080042dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e0:	f7ff fff0 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 80042e4:	4601      	mov	r1, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0a9b      	lsrs	r3, r3, #10
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4a03      	ldr	r2, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	0800566c 	.word	0x0800566c

08004304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e056      	b.n	80043c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc fce7 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	ea42 0103 	orr.w	r1, r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f003 0104 	and.w	r1, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_SPI_Transmit+0x22>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e11e      	b.n	800462c <HAL_SPI_Transmit+0x260>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f6:	f7fd ff3b 	bl	8002270 <HAL_GetTick>
 80043fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800440c:	2302      	movs	r3, #2
 800440e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004410:	e103      	b.n	800461a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_SPI_Transmit+0x52>
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004422:	e0fa      	b.n	800461a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2203      	movs	r2, #3
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446a:	d107      	bne.n	800447c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d007      	beq.n	800449a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a2:	d14b      	bne.n	800453c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_SPI_Transmit+0xe6>
 80044ac:	8afb      	ldrh	r3, [r7, #22]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d13e      	bne.n	8004530 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	881a      	ldrh	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	1c9a      	adds	r2, r3, #2
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044d6:	e02b      	b.n	8004530 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d112      	bne.n	800450c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	881a      	ldrh	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	1c9a      	adds	r2, r3, #2
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	86da      	strh	r2, [r3, #54]	; 0x36
 800450a:	e011      	b.n	8004530 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450c:	f7fd feb0 	bl	8002270 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d803      	bhi.n	8004524 <HAL_SPI_Transmit+0x158>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d102      	bne.n	800452a <HAL_SPI_Transmit+0x15e>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800452e:	e074      	b.n	800461a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ce      	bne.n	80044d8 <HAL_SPI_Transmit+0x10c>
 800453a:	e04c      	b.n	80045d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_SPI_Transmit+0x17e>
 8004544:	8afb      	ldrh	r3, [r7, #22]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d140      	bne.n	80045cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004570:	e02c      	b.n	80045cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d113      	bne.n	80045a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80045a6:	e011      	b.n	80045cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a8:	f7fd fe62 	bl	8002270 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d803      	bhi.n	80045c0 <HAL_SPI_Transmit+0x1f4>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d102      	bne.n	80045c6 <HAL_SPI_Transmit+0x1fa>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045ca:	e026      	b.n	800461a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1cd      	bne.n	8004572 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fba4 	bl	8004d28 <SPI_EndRxTxTransaction>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e000      	b.n	800461a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800462a:	7ffb      	ldrb	r3, [r7, #31]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004650:	d112      	bne.n	8004678 <HAL_SPI_Receive+0x44>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10e      	bne.n	8004678 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2204      	movs	r2, #4
 800465e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8e9 	bl	8004846 <HAL_SPI_TransmitReceive>
 8004674:	4603      	mov	r3, r0
 8004676:	e0e2      	b.n	800483e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_SPI_Receive+0x52>
 8004682:	2302      	movs	r3, #2
 8004684:	e0db      	b.n	800483e <HAL_SPI_Receive+0x20a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800468e:	f7fd fdef 	bl	8002270 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
 80046a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046a4:	e0c2      	b.n	800482c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_Receive+0x7e>
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046b6:	e0b9      	b.n	800482c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2204      	movs	r2, #4
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	88fa      	ldrh	r2, [r7, #6]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fe:	d107      	bne.n	8004710 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800470e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d007      	beq.n	800472e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800472c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d162      	bne.n	80047fc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004736:	e02e      	b.n	8004796 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d115      	bne.n	8004772 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f103 020c 	add.w	r2, r3, #12
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	7812      	ldrb	r2, [r2, #0]
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004770:	e011      	b.n	8004796 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004772:	f7fd fd7d 	bl	8002270 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d803      	bhi.n	800478a <HAL_SPI_Receive+0x156>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d102      	bne.n	8004790 <HAL_SPI_Receive+0x15c>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004794:	e04a      	b.n	800482c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1cb      	bne.n	8004738 <HAL_SPI_Receive+0x104>
 80047a0:	e031      	b.n	8004806 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d113      	bne.n	80047d8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	b292      	uxth	r2, r2
 80047bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	1c9a      	adds	r2, r3, #2
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047d6:	e011      	b.n	80047fc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d8:	f7fd fd4a 	bl	8002270 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d803      	bhi.n	80047f0 <HAL_SPI_Receive+0x1bc>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d102      	bne.n	80047f6 <HAL_SPI_Receive+0x1c2>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047fa:	e017      	b.n	800482c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1cd      	bne.n	80047a2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fa27 	bl	8004c5e <SPI_EndRxTransaction>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
 8004828:	e000      	b.n	800482c <HAL_SPI_Receive+0x1f8>
  }

error :
 800482a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800483c:	7dfb      	ldrb	r3, [r7, #23]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b08c      	sub	sp, #48	; 0x30
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004854:	2301      	movs	r3, #1
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_SPI_TransmitReceive+0x26>
 8004868:	2302      	movs	r3, #2
 800486a:	e18a      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x33c>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004874:	f7fd fcfc 	bl	8002270 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800488e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004892:	2b01      	cmp	r3, #1
 8004894:	d00f      	beq.n	80048b6 <HAL_SPI_TransmitReceive+0x70>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489c:	d107      	bne.n	80048ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <HAL_SPI_TransmitReceive+0x68>
 80048a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d003      	beq.n	80048b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
 80048b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048b4:	e15b      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_SPI_TransmitReceive+0x82>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_SPI_TransmitReceive+0x82>
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048ce:	e14e      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d003      	beq.n	80048e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2205      	movs	r2, #5
 80048e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	887a      	ldrh	r2, [r7, #2]
 80048fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	887a      	ldrh	r2, [r7, #2]
 8004906:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d007      	beq.n	8004938 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004940:	d178      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_SPI_TransmitReceive+0x10a>
 800494a:	8b7b      	ldrh	r3, [r7, #26]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d166      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004974:	e053      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d11b      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x176>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x176>
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d113      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d119      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x1b8>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d014      	beq.n	80049fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	b292      	uxth	r2, r2
 80049e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	1c9a      	adds	r2, r3, #2
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049fa:	2301      	movs	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049fe:	f7fd fc37 	bl	8002270 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d807      	bhi.n	8004a1e <HAL_SPI_TransmitReceive+0x1d8>
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d003      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a1c:	e0a7      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1a6      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x130>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1a1      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x130>
 8004a32:	e07c      	b.n	8004b2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x1fc>
 8004a3c:	8b7b      	ldrh	r3, [r7, #26]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d16b      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a68:	e057      	b.n	8004b1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d11c      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x26c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d017      	beq.n	8004ab2 <HAL_SPI_TransmitReceive+0x26c>
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d114      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d119      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x2ae>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d014      	beq.n	8004af4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af0:	2301      	movs	r3, #1
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004af4:	f7fd fbbc 	bl	8002270 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d803      	bhi.n	8004b0c <HAL_SPI_TransmitReceive+0x2c6>
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x2cc>
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b18:	e029      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1a2      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x224>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d19d      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f8f8 	bl	8004d28 <SPI_EndRxTxTransaction>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b4a:	e010      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	e000      	b.n	8004b6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3730      	adds	r7, #48	; 0x30
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b9a:	e04c      	b.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d048      	beq.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ba4:	f7fd fb64 	bl	8002270 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d902      	bls.n	8004bba <SPI_WaitFlagStateUntilTimeout+0x30>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d13d      	bne.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd2:	d111      	bne.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d004      	beq.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d107      	bne.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c00:	d10f      	bne.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e00f      	b.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1a3      	bne.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c72:	d111      	bne.n	8004c98 <SPI_EndRxTransaction+0x3a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7c:	d004      	beq.n	8004c88 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c86:	d107      	bne.n	8004c98 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c96:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca0:	d12a      	bne.n	8004cf8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004caa:	d012      	beq.n	8004cd2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff ff67 	bl	8004b8a <SPI_WaitFlagStateUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02d      	beq.n	8004d1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e026      	b.n	8004d20 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2101      	movs	r1, #1
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7ff ff54 	bl	8004b8a <SPI_WaitFlagStateUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01a      	beq.n	8004d1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e013      	b.n	8004d20 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2101      	movs	r1, #1
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff ff41 	bl	8004b8a <SPI_WaitFlagStateUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e000      	b.n	8004d20 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <SPI_EndRxTxTransaction+0x7c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <SPI_EndRxTxTransaction+0x80>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	0d5b      	lsrs	r3, r3, #21
 8004d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d52:	d112      	bne.n	8004d7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2180      	movs	r1, #128	; 0x80
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff ff13 	bl	8004b8a <SPI_WaitFlagStateUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d016      	beq.n	8004d98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e00f      	b.n	8004d9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b80      	cmp	r3, #128	; 0x80
 8004d92:	d0f2      	beq.n	8004d7a <SPI_EndRxTxTransaction+0x52>
 8004d94:	e000      	b.n	8004d98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d96:	bf00      	nop
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	165e9f81 	.word	0x165e9f81

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	; (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000018 	.word	0x20000018

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4e0d      	ldr	r6, [pc, #52]	; (8004df0 <__libc_init_array+0x38>)
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	; (8004df4 <__libc_init_array+0x3c>)
 8004dbe:	1ba4      	subs	r4, r4, r6
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	42a5      	cmp	r5, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4e0b      	ldr	r6, [pc, #44]	; (8004df8 <__libc_init_array+0x40>)
 8004dca:	4c0c      	ldr	r4, [pc, #48]	; (8004dfc <__libc_init_array+0x44>)
 8004dcc:	f000 fc28 	bl	8005620 <_init>
 8004dd0:	1ba4      	subs	r4, r4, r6
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	42a5      	cmp	r5, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004de0:	4798      	blx	r3
 8004de2:	3501      	adds	r5, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dea:	4798      	blx	r3
 8004dec:	3501      	adds	r5, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	080056b0 	.word	0x080056b0
 8004df4:	080056b0 	.word	0x080056b0
 8004df8:	080056b0 	.word	0x080056b0
 8004dfc:	080056b4 	.word	0x080056b4

08004e00 <memcpy>:
 8004e00:	b510      	push	{r4, lr}
 8004e02:	1e43      	subs	r3, r0, #1
 8004e04:	440a      	add	r2, r1
 8004e06:	4291      	cmp	r1, r2
 8004e08:	d100      	bne.n	8004e0c <memcpy+0xc>
 8004e0a:	bd10      	pop	{r4, pc}
 8004e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e14:	e7f7      	b.n	8004e06 <memcpy+0x6>

08004e16 <memset>:
 8004e16:	4402      	add	r2, r0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d100      	bne.n	8004e20 <memset+0xa>
 8004e1e:	4770      	bx	lr
 8004e20:	f803 1b01 	strb.w	r1, [r3], #1
 8004e24:	e7f9      	b.n	8004e1a <memset+0x4>
	...

08004e28 <_vsiprintf_r>:
 8004e28:	b500      	push	{lr}
 8004e2a:	b09b      	sub	sp, #108	; 0x6c
 8004e2c:	9100      	str	r1, [sp, #0]
 8004e2e:	9104      	str	r1, [sp, #16]
 8004e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e34:	9105      	str	r1, [sp, #20]
 8004e36:	9102      	str	r1, [sp, #8]
 8004e38:	4905      	ldr	r1, [pc, #20]	; (8004e50 <_vsiprintf_r+0x28>)
 8004e3a:	9103      	str	r1, [sp, #12]
 8004e3c:	4669      	mov	r1, sp
 8004e3e:	f000 f86d 	bl	8004f1c <_svfiprintf_r>
 8004e42:	9b00      	ldr	r3, [sp, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	b01b      	add	sp, #108	; 0x6c
 8004e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e4e:	bf00      	nop
 8004e50:	ffff0208 	.word	0xffff0208

08004e54 <vsiprintf>:
 8004e54:	4613      	mov	r3, r2
 8004e56:	460a      	mov	r2, r1
 8004e58:	4601      	mov	r1, r0
 8004e5a:	4802      	ldr	r0, [pc, #8]	; (8004e64 <vsiprintf+0x10>)
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f7ff bfe3 	b.w	8004e28 <_vsiprintf_r>
 8004e62:	bf00      	nop
 8004e64:	20000018 	.word	0x20000018

08004e68 <__ssputs_r>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	688e      	ldr	r6, [r1, #8]
 8004e6e:	429e      	cmp	r6, r3
 8004e70:	4682      	mov	sl, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4690      	mov	r8, r2
 8004e76:	4699      	mov	r9, r3
 8004e78:	d837      	bhi.n	8004eea <__ssputs_r+0x82>
 8004e7a:	898a      	ldrh	r2, [r1, #12]
 8004e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e80:	d031      	beq.n	8004ee6 <__ssputs_r+0x7e>
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	6909      	ldr	r1, [r1, #16]
 8004e86:	1a6f      	subs	r7, r5, r1
 8004e88:	6965      	ldr	r5, [r4, #20]
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e90:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e94:	f109 0301 	add.w	r3, r9, #1
 8004e98:	443b      	add	r3, r7
 8004e9a:	429d      	cmp	r5, r3
 8004e9c:	bf38      	it	cc
 8004e9e:	461d      	movcc	r5, r3
 8004ea0:	0553      	lsls	r3, r2, #21
 8004ea2:	d530      	bpl.n	8004f06 <__ssputs_r+0x9e>
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f000 fb21 	bl	80054ec <_malloc_r>
 8004eaa:	4606      	mov	r6, r0
 8004eac:	b950      	cbnz	r0, 8004ec4 <__ssputs_r+0x5c>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	f8ca 3000 	str.w	r3, [sl]
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	6921      	ldr	r1, [r4, #16]
 8004ec8:	f7ff ff9a 	bl	8004e00 <memcpy>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	6126      	str	r6, [r4, #16]
 8004eda:	6165      	str	r5, [r4, #20]
 8004edc:	443e      	add	r6, r7
 8004ede:	1bed      	subs	r5, r5, r7
 8004ee0:	6026      	str	r6, [r4, #0]
 8004ee2:	60a5      	str	r5, [r4, #8]
 8004ee4:	464e      	mov	r6, r9
 8004ee6:	454e      	cmp	r6, r9
 8004ee8:	d900      	bls.n	8004eec <__ssputs_r+0x84>
 8004eea:	464e      	mov	r6, r9
 8004eec:	4632      	mov	r2, r6
 8004eee:	4641      	mov	r1, r8
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f000 fa93 	bl	800541c <memmove>
 8004ef6:	68a3      	ldr	r3, [r4, #8]
 8004ef8:	1b9b      	subs	r3, r3, r6
 8004efa:	60a3      	str	r3, [r4, #8]
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	441e      	add	r6, r3
 8004f00:	6026      	str	r6, [r4, #0]
 8004f02:	2000      	movs	r0, #0
 8004f04:	e7dc      	b.n	8004ec0 <__ssputs_r+0x58>
 8004f06:	462a      	mov	r2, r5
 8004f08:	f000 fb4a 	bl	80055a0 <_realloc_r>
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d1e2      	bne.n	8004ed8 <__ssputs_r+0x70>
 8004f12:	6921      	ldr	r1, [r4, #16]
 8004f14:	4650      	mov	r0, sl
 8004f16:	f000 fa9b 	bl	8005450 <_free_r>
 8004f1a:	e7c8      	b.n	8004eae <__ssputs_r+0x46>

08004f1c <_svfiprintf_r>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	461d      	mov	r5, r3
 8004f22:	898b      	ldrh	r3, [r1, #12]
 8004f24:	061f      	lsls	r7, r3, #24
 8004f26:	b09d      	sub	sp, #116	; 0x74
 8004f28:	4680      	mov	r8, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	d50f      	bpl.n	8004f50 <_svfiprintf_r+0x34>
 8004f30:	690b      	ldr	r3, [r1, #16]
 8004f32:	b96b      	cbnz	r3, 8004f50 <_svfiprintf_r+0x34>
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	f000 fad9 	bl	80054ec <_malloc_r>
 8004f3a:	6020      	str	r0, [r4, #0]
 8004f3c:	6120      	str	r0, [r4, #16]
 8004f3e:	b928      	cbnz	r0, 8004f4c <_svfiprintf_r+0x30>
 8004f40:	230c      	movs	r3, #12
 8004f42:	f8c8 3000 	str.w	r3, [r8]
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	e0c8      	b.n	80050de <_svfiprintf_r+0x1c2>
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	6163      	str	r3, [r4, #20]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9309      	str	r3, [sp, #36]	; 0x24
 8004f54:	2320      	movs	r3, #32
 8004f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5a:	2330      	movs	r3, #48	; 0x30
 8004f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f60:	9503      	str	r5, [sp, #12]
 8004f62:	f04f 0b01 	mov.w	fp, #1
 8004f66:	4637      	mov	r7, r6
 8004f68:	463d      	mov	r5, r7
 8004f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f6e:	b10b      	cbz	r3, 8004f74 <_svfiprintf_r+0x58>
 8004f70:	2b25      	cmp	r3, #37	; 0x25
 8004f72:	d13e      	bne.n	8004ff2 <_svfiprintf_r+0xd6>
 8004f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f78:	d00b      	beq.n	8004f92 <_svfiprintf_r+0x76>
 8004f7a:	4653      	mov	r3, sl
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4640      	mov	r0, r8
 8004f82:	f7ff ff71 	bl	8004e68 <__ssputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80a4 	beq.w	80050d4 <_svfiprintf_r+0x1b8>
 8004f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8e:	4453      	add	r3, sl
 8004f90:	9309      	str	r3, [sp, #36]	; 0x24
 8004f92:	783b      	ldrb	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 809d 	beq.w	80050d4 <_svfiprintf_r+0x1b8>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fac:	931a      	str	r3, [sp, #104]	; 0x68
 8004fae:	462f      	mov	r7, r5
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004fb6:	4850      	ldr	r0, [pc, #320]	; (80050f8 <_svfiprintf_r+0x1dc>)
 8004fb8:	f7fb f912 	bl	80001e0 <memchr>
 8004fbc:	9b04      	ldr	r3, [sp, #16]
 8004fbe:	b9d0      	cbnz	r0, 8004ff6 <_svfiprintf_r+0xda>
 8004fc0:	06d9      	lsls	r1, r3, #27
 8004fc2:	bf44      	itt	mi
 8004fc4:	2220      	movmi	r2, #32
 8004fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fca:	071a      	lsls	r2, r3, #28
 8004fcc:	bf44      	itt	mi
 8004fce:	222b      	movmi	r2, #43	; 0x2b
 8004fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fd4:	782a      	ldrb	r2, [r5, #0]
 8004fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8004fd8:	d015      	beq.n	8005006 <_svfiprintf_r+0xea>
 8004fda:	9a07      	ldr	r2, [sp, #28]
 8004fdc:	462f      	mov	r7, r5
 8004fde:	2000      	movs	r0, #0
 8004fe0:	250a      	movs	r5, #10
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe8:	3b30      	subs	r3, #48	; 0x30
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d94d      	bls.n	800508a <_svfiprintf_r+0x16e>
 8004fee:	b1b8      	cbz	r0, 8005020 <_svfiprintf_r+0x104>
 8004ff0:	e00f      	b.n	8005012 <_svfiprintf_r+0xf6>
 8004ff2:	462f      	mov	r7, r5
 8004ff4:	e7b8      	b.n	8004f68 <_svfiprintf_r+0x4c>
 8004ff6:	4a40      	ldr	r2, [pc, #256]	; (80050f8 <_svfiprintf_r+0x1dc>)
 8004ff8:	1a80      	subs	r0, r0, r2
 8004ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8004ffe:	4318      	orrs	r0, r3
 8005000:	9004      	str	r0, [sp, #16]
 8005002:	463d      	mov	r5, r7
 8005004:	e7d3      	b.n	8004fae <_svfiprintf_r+0x92>
 8005006:	9a03      	ldr	r2, [sp, #12]
 8005008:	1d11      	adds	r1, r2, #4
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	9103      	str	r1, [sp, #12]
 800500e:	2a00      	cmp	r2, #0
 8005010:	db01      	blt.n	8005016 <_svfiprintf_r+0xfa>
 8005012:	9207      	str	r2, [sp, #28]
 8005014:	e004      	b.n	8005020 <_svfiprintf_r+0x104>
 8005016:	4252      	negs	r2, r2
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	9207      	str	r2, [sp, #28]
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	783b      	ldrb	r3, [r7, #0]
 8005022:	2b2e      	cmp	r3, #46	; 0x2e
 8005024:	d10c      	bne.n	8005040 <_svfiprintf_r+0x124>
 8005026:	787b      	ldrb	r3, [r7, #1]
 8005028:	2b2a      	cmp	r3, #42	; 0x2a
 800502a:	d133      	bne.n	8005094 <_svfiprintf_r+0x178>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	9203      	str	r2, [sp, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	bfb8      	it	lt
 8005038:	f04f 33ff 	movlt.w	r3, #4294967295
 800503c:	3702      	adds	r7, #2
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	4d2e      	ldr	r5, [pc, #184]	; (80050fc <_svfiprintf_r+0x1e0>)
 8005042:	7839      	ldrb	r1, [r7, #0]
 8005044:	2203      	movs	r2, #3
 8005046:	4628      	mov	r0, r5
 8005048:	f7fb f8ca 	bl	80001e0 <memchr>
 800504c:	b138      	cbz	r0, 800505e <_svfiprintf_r+0x142>
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	1b40      	subs	r0, r0, r5
 8005052:	fa03 f000 	lsl.w	r0, r3, r0
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	4303      	orrs	r3, r0
 800505a:	3701      	adds	r7, #1
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	7839      	ldrb	r1, [r7, #0]
 8005060:	4827      	ldr	r0, [pc, #156]	; (8005100 <_svfiprintf_r+0x1e4>)
 8005062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005066:	2206      	movs	r2, #6
 8005068:	1c7e      	adds	r6, r7, #1
 800506a:	f7fb f8b9 	bl	80001e0 <memchr>
 800506e:	2800      	cmp	r0, #0
 8005070:	d038      	beq.n	80050e4 <_svfiprintf_r+0x1c8>
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <_svfiprintf_r+0x1e8>)
 8005074:	bb13      	cbnz	r3, 80050bc <_svfiprintf_r+0x1a0>
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	3307      	adds	r3, #7
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	3308      	adds	r3, #8
 8005080:	9303      	str	r3, [sp, #12]
 8005082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005084:	444b      	add	r3, r9
 8005086:	9309      	str	r3, [sp, #36]	; 0x24
 8005088:	e76d      	b.n	8004f66 <_svfiprintf_r+0x4a>
 800508a:	fb05 3202 	mla	r2, r5, r2, r3
 800508e:	2001      	movs	r0, #1
 8005090:	460f      	mov	r7, r1
 8005092:	e7a6      	b.n	8004fe2 <_svfiprintf_r+0xc6>
 8005094:	2300      	movs	r3, #0
 8005096:	3701      	adds	r7, #1
 8005098:	9305      	str	r3, [sp, #20]
 800509a:	4619      	mov	r1, r3
 800509c:	250a      	movs	r5, #10
 800509e:	4638      	mov	r0, r7
 80050a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a4:	3a30      	subs	r2, #48	; 0x30
 80050a6:	2a09      	cmp	r2, #9
 80050a8:	d903      	bls.n	80050b2 <_svfiprintf_r+0x196>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0c8      	beq.n	8005040 <_svfiprintf_r+0x124>
 80050ae:	9105      	str	r1, [sp, #20]
 80050b0:	e7c6      	b.n	8005040 <_svfiprintf_r+0x124>
 80050b2:	fb05 2101 	mla	r1, r5, r1, r2
 80050b6:	2301      	movs	r3, #1
 80050b8:	4607      	mov	r7, r0
 80050ba:	e7f0      	b.n	800509e <_svfiprintf_r+0x182>
 80050bc:	ab03      	add	r3, sp, #12
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4622      	mov	r2, r4
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <_svfiprintf_r+0x1ec>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	4640      	mov	r0, r8
 80050c8:	f3af 8000 	nop.w
 80050cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050d0:	4681      	mov	r9, r0
 80050d2:	d1d6      	bne.n	8005082 <_svfiprintf_r+0x166>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	065b      	lsls	r3, r3, #25
 80050d8:	f53f af35 	bmi.w	8004f46 <_svfiprintf_r+0x2a>
 80050dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050de:	b01d      	add	sp, #116	; 0x74
 80050e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e4:	ab03      	add	r3, sp, #12
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4622      	mov	r2, r4
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <_svfiprintf_r+0x1ec>)
 80050ec:	a904      	add	r1, sp, #16
 80050ee:	4640      	mov	r0, r8
 80050f0:	f000 f882 	bl	80051f8 <_printf_i>
 80050f4:	e7ea      	b.n	80050cc <_svfiprintf_r+0x1b0>
 80050f6:	bf00      	nop
 80050f8:	08005674 	.word	0x08005674
 80050fc:	0800567a 	.word	0x0800567a
 8005100:	0800567e 	.word	0x0800567e
 8005104:	00000000 	.word	0x00000000
 8005108:	08004e69 	.word	0x08004e69

0800510c <_printf_common>:
 800510c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	4691      	mov	r9, r2
 8005112:	461f      	mov	r7, r3
 8005114:	688a      	ldr	r2, [r1, #8]
 8005116:	690b      	ldr	r3, [r1, #16]
 8005118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800511c:	4293      	cmp	r3, r2
 800511e:	bfb8      	it	lt
 8005120:	4613      	movlt	r3, r2
 8005122:	f8c9 3000 	str.w	r3, [r9]
 8005126:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800512a:	4606      	mov	r6, r0
 800512c:	460c      	mov	r4, r1
 800512e:	b112      	cbz	r2, 8005136 <_printf_common+0x2a>
 8005130:	3301      	adds	r3, #1
 8005132:	f8c9 3000 	str.w	r3, [r9]
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	0699      	lsls	r1, r3, #26
 800513a:	bf42      	ittt	mi
 800513c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005140:	3302      	addmi	r3, #2
 8005142:	f8c9 3000 	strmi.w	r3, [r9]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d107      	bne.n	800515e <_printf_common+0x52>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	f8d9 2000 	ldr.w	r2, [r9]
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	42ab      	cmp	r3, r5
 800515c:	dc28      	bgt.n	80051b0 <_printf_common+0xa4>
 800515e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	3300      	adds	r3, #0
 8005166:	bf18      	it	ne
 8005168:	2301      	movne	r3, #1
 800516a:	0692      	lsls	r2, r2, #26
 800516c:	d42d      	bmi.n	80051ca <_printf_common+0xbe>
 800516e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005172:	4639      	mov	r1, r7
 8005174:	4630      	mov	r0, r6
 8005176:	47c0      	blx	r8
 8005178:	3001      	adds	r0, #1
 800517a:	d020      	beq.n	80051be <_printf_common+0xb2>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	68e5      	ldr	r5, [r4, #12]
 8005180:	f8d9 2000 	ldr.w	r2, [r9]
 8005184:	f003 0306 	and.w	r3, r3, #6
 8005188:	2b04      	cmp	r3, #4
 800518a:	bf08      	it	eq
 800518c:	1aad      	subeq	r5, r5, r2
 800518e:	68a3      	ldr	r3, [r4, #8]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	bf0c      	ite	eq
 8005194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005198:	2500      	movne	r5, #0
 800519a:	4293      	cmp	r3, r2
 800519c:	bfc4      	itt	gt
 800519e:	1a9b      	subgt	r3, r3, r2
 80051a0:	18ed      	addgt	r5, r5, r3
 80051a2:	f04f 0900 	mov.w	r9, #0
 80051a6:	341a      	adds	r4, #26
 80051a8:	454d      	cmp	r5, r9
 80051aa:	d11a      	bne.n	80051e2 <_printf_common+0xd6>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e008      	b.n	80051c2 <_printf_common+0xb6>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4652      	mov	r2, sl
 80051b4:	4639      	mov	r1, r7
 80051b6:	4630      	mov	r0, r6
 80051b8:	47c0      	blx	r8
 80051ba:	3001      	adds	r0, #1
 80051bc:	d103      	bne.n	80051c6 <_printf_common+0xba>
 80051be:	f04f 30ff 	mov.w	r0, #4294967295
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	3501      	adds	r5, #1
 80051c8:	e7c3      	b.n	8005152 <_printf_common+0x46>
 80051ca:	18e1      	adds	r1, r4, r3
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	2030      	movs	r0, #48	; 0x30
 80051d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d4:	4422      	add	r2, r4
 80051d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051de:	3302      	adds	r3, #2
 80051e0:	e7c5      	b.n	800516e <_printf_common+0x62>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4622      	mov	r2, r4
 80051e6:	4639      	mov	r1, r7
 80051e8:	4630      	mov	r0, r6
 80051ea:	47c0      	blx	r8
 80051ec:	3001      	adds	r0, #1
 80051ee:	d0e6      	beq.n	80051be <_printf_common+0xb2>
 80051f0:	f109 0901 	add.w	r9, r9, #1
 80051f4:	e7d8      	b.n	80051a8 <_printf_common+0x9c>
	...

080051f8 <_printf_i>:
 80051f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005200:	460c      	mov	r4, r1
 8005202:	7e09      	ldrb	r1, [r1, #24]
 8005204:	b085      	sub	sp, #20
 8005206:	296e      	cmp	r1, #110	; 0x6e
 8005208:	4617      	mov	r7, r2
 800520a:	4606      	mov	r6, r0
 800520c:	4698      	mov	r8, r3
 800520e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005210:	f000 80b3 	beq.w	800537a <_printf_i+0x182>
 8005214:	d822      	bhi.n	800525c <_printf_i+0x64>
 8005216:	2963      	cmp	r1, #99	; 0x63
 8005218:	d036      	beq.n	8005288 <_printf_i+0x90>
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x3a>
 800521c:	2900      	cmp	r1, #0
 800521e:	f000 80b9 	beq.w	8005394 <_printf_i+0x19c>
 8005222:	2958      	cmp	r1, #88	; 0x58
 8005224:	f000 8083 	beq.w	800532e <_printf_i+0x136>
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005230:	e032      	b.n	8005298 <_printf_i+0xa0>
 8005232:	2964      	cmp	r1, #100	; 0x64
 8005234:	d001      	beq.n	800523a <_printf_i+0x42>
 8005236:	2969      	cmp	r1, #105	; 0x69
 8005238:	d1f6      	bne.n	8005228 <_printf_i+0x30>
 800523a:	6820      	ldr	r0, [r4, #0]
 800523c:	6813      	ldr	r3, [r2, #0]
 800523e:	0605      	lsls	r5, r0, #24
 8005240:	f103 0104 	add.w	r1, r3, #4
 8005244:	d52a      	bpl.n	800529c <_printf_i+0xa4>
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da03      	bge.n	8005256 <_printf_i+0x5e>
 800524e:	222d      	movs	r2, #45	; 0x2d
 8005250:	425b      	negs	r3, r3
 8005252:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005256:	486f      	ldr	r0, [pc, #444]	; (8005414 <_printf_i+0x21c>)
 8005258:	220a      	movs	r2, #10
 800525a:	e039      	b.n	80052d0 <_printf_i+0xd8>
 800525c:	2973      	cmp	r1, #115	; 0x73
 800525e:	f000 809d 	beq.w	800539c <_printf_i+0x1a4>
 8005262:	d808      	bhi.n	8005276 <_printf_i+0x7e>
 8005264:	296f      	cmp	r1, #111	; 0x6f
 8005266:	d020      	beq.n	80052aa <_printf_i+0xb2>
 8005268:	2970      	cmp	r1, #112	; 0x70
 800526a:	d1dd      	bne.n	8005228 <_printf_i+0x30>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f043 0320 	orr.w	r3, r3, #32
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	e003      	b.n	800527e <_printf_i+0x86>
 8005276:	2975      	cmp	r1, #117	; 0x75
 8005278:	d017      	beq.n	80052aa <_printf_i+0xb2>
 800527a:	2978      	cmp	r1, #120	; 0x78
 800527c:	d1d4      	bne.n	8005228 <_printf_i+0x30>
 800527e:	2378      	movs	r3, #120	; 0x78
 8005280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005284:	4864      	ldr	r0, [pc, #400]	; (8005418 <_printf_i+0x220>)
 8005286:	e055      	b.n	8005334 <_printf_i+0x13c>
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	1d19      	adds	r1, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6011      	str	r1, [r2, #0]
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e08c      	b.n	80053b6 <_printf_i+0x1be>
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6011      	str	r1, [r2, #0]
 80052a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052a4:	bf18      	it	ne
 80052a6:	b21b      	sxthne	r3, r3
 80052a8:	e7cf      	b.n	800524a <_printf_i+0x52>
 80052aa:	6813      	ldr	r3, [r2, #0]
 80052ac:	6825      	ldr	r5, [r4, #0]
 80052ae:	1d18      	adds	r0, r3, #4
 80052b0:	6010      	str	r0, [r2, #0]
 80052b2:	0628      	lsls	r0, r5, #24
 80052b4:	d501      	bpl.n	80052ba <_printf_i+0xc2>
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	e002      	b.n	80052c0 <_printf_i+0xc8>
 80052ba:	0668      	lsls	r0, r5, #25
 80052bc:	d5fb      	bpl.n	80052b6 <_printf_i+0xbe>
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	4854      	ldr	r0, [pc, #336]	; (8005414 <_printf_i+0x21c>)
 80052c2:	296f      	cmp	r1, #111	; 0x6f
 80052c4:	bf14      	ite	ne
 80052c6:	220a      	movne	r2, #10
 80052c8:	2208      	moveq	r2, #8
 80052ca:	2100      	movs	r1, #0
 80052cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d0:	6865      	ldr	r5, [r4, #4]
 80052d2:	60a5      	str	r5, [r4, #8]
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	f2c0 8095 	blt.w	8005404 <_printf_i+0x20c>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	f021 0104 	bic.w	r1, r1, #4
 80052e0:	6021      	str	r1, [r4, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d13d      	bne.n	8005362 <_printf_i+0x16a>
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	f040 808e 	bne.w	8005408 <_printf_i+0x210>
 80052ec:	4665      	mov	r5, ip
 80052ee:	2a08      	cmp	r2, #8
 80052f0:	d10b      	bne.n	800530a <_printf_i+0x112>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	07db      	lsls	r3, r3, #31
 80052f6:	d508      	bpl.n	800530a <_printf_i+0x112>
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	bfde      	ittt	le
 8005300:	2330      	movle	r3, #48	; 0x30
 8005302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005306:	f105 35ff 	addle.w	r5, r5, #4294967295
 800530a:	ebac 0305 	sub.w	r3, ip, r5
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	f8cd 8000 	str.w	r8, [sp]
 8005314:	463b      	mov	r3, r7
 8005316:	aa03      	add	r2, sp, #12
 8005318:	4621      	mov	r1, r4
 800531a:	4630      	mov	r0, r6
 800531c:	f7ff fef6 	bl	800510c <_printf_common>
 8005320:	3001      	adds	r0, #1
 8005322:	d14d      	bne.n	80053c0 <_printf_i+0x1c8>
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	b005      	add	sp, #20
 800532a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800532e:	4839      	ldr	r0, [pc, #228]	; (8005414 <_printf_i+0x21c>)
 8005330:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	1d1d      	adds	r5, r3, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6015      	str	r5, [r2, #0]
 800533e:	060a      	lsls	r2, r1, #24
 8005340:	d50b      	bpl.n	800535a <_printf_i+0x162>
 8005342:	07ca      	lsls	r2, r1, #31
 8005344:	bf44      	itt	mi
 8005346:	f041 0120 	orrmi.w	r1, r1, #32
 800534a:	6021      	strmi	r1, [r4, #0]
 800534c:	b91b      	cbnz	r3, 8005356 <_printf_i+0x15e>
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	f022 0220 	bic.w	r2, r2, #32
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	2210      	movs	r2, #16
 8005358:	e7b7      	b.n	80052ca <_printf_i+0xd2>
 800535a:	064d      	lsls	r5, r1, #25
 800535c:	bf48      	it	mi
 800535e:	b29b      	uxthmi	r3, r3
 8005360:	e7ef      	b.n	8005342 <_printf_i+0x14a>
 8005362:	4665      	mov	r5, ip
 8005364:	fbb3 f1f2 	udiv	r1, r3, r2
 8005368:	fb02 3311 	mls	r3, r2, r1, r3
 800536c:	5cc3      	ldrb	r3, [r0, r3]
 800536e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005372:	460b      	mov	r3, r1
 8005374:	2900      	cmp	r1, #0
 8005376:	d1f5      	bne.n	8005364 <_printf_i+0x16c>
 8005378:	e7b9      	b.n	80052ee <_printf_i+0xf6>
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	6825      	ldr	r5, [r4, #0]
 800537e:	6961      	ldr	r1, [r4, #20]
 8005380:	1d18      	adds	r0, r3, #4
 8005382:	6010      	str	r0, [r2, #0]
 8005384:	0628      	lsls	r0, r5, #24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	d501      	bpl.n	800538e <_printf_i+0x196>
 800538a:	6019      	str	r1, [r3, #0]
 800538c:	e002      	b.n	8005394 <_printf_i+0x19c>
 800538e:	066a      	lsls	r2, r5, #25
 8005390:	d5fb      	bpl.n	800538a <_printf_i+0x192>
 8005392:	8019      	strh	r1, [r3, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	4665      	mov	r5, ip
 800539a:	e7b9      	b.n	8005310 <_printf_i+0x118>
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	1d19      	adds	r1, r3, #4
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	681d      	ldr	r5, [r3, #0]
 80053a4:	6862      	ldr	r2, [r4, #4]
 80053a6:	2100      	movs	r1, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7fa ff19 	bl	80001e0 <memchr>
 80053ae:	b108      	cbz	r0, 80053b4 <_printf_i+0x1bc>
 80053b0:	1b40      	subs	r0, r0, r5
 80053b2:	6060      	str	r0, [r4, #4]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	2300      	movs	r3, #0
 80053ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053be:	e7a7      	b.n	8005310 <_printf_i+0x118>
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	462a      	mov	r2, r5
 80053c4:	4639      	mov	r1, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d0aa      	beq.n	8005324 <_printf_i+0x12c>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	079b      	lsls	r3, r3, #30
 80053d2:	d413      	bmi.n	80053fc <_printf_i+0x204>
 80053d4:	68e0      	ldr	r0, [r4, #12]
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	4298      	cmp	r0, r3
 80053da:	bfb8      	it	lt
 80053dc:	4618      	movlt	r0, r3
 80053de:	e7a3      	b.n	8005328 <_printf_i+0x130>
 80053e0:	2301      	movs	r3, #1
 80053e2:	464a      	mov	r2, r9
 80053e4:	4639      	mov	r1, r7
 80053e6:	4630      	mov	r0, r6
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d09a      	beq.n	8005324 <_printf_i+0x12c>
 80053ee:	3501      	adds	r5, #1
 80053f0:	68e3      	ldr	r3, [r4, #12]
 80053f2:	9a03      	ldr	r2, [sp, #12]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	42ab      	cmp	r3, r5
 80053f8:	dcf2      	bgt.n	80053e0 <_printf_i+0x1e8>
 80053fa:	e7eb      	b.n	80053d4 <_printf_i+0x1dc>
 80053fc:	2500      	movs	r5, #0
 80053fe:	f104 0919 	add.w	r9, r4, #25
 8005402:	e7f5      	b.n	80053f0 <_printf_i+0x1f8>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ac      	bne.n	8005362 <_printf_i+0x16a>
 8005408:	7803      	ldrb	r3, [r0, #0]
 800540a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800540e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005412:	e76c      	b.n	80052ee <_printf_i+0xf6>
 8005414:	08005685 	.word	0x08005685
 8005418:	08005696 	.word	0x08005696

0800541c <memmove>:
 800541c:	4288      	cmp	r0, r1
 800541e:	b510      	push	{r4, lr}
 8005420:	eb01 0302 	add.w	r3, r1, r2
 8005424:	d807      	bhi.n	8005436 <memmove+0x1a>
 8005426:	1e42      	subs	r2, r0, #1
 8005428:	4299      	cmp	r1, r3
 800542a:	d00a      	beq.n	8005442 <memmove+0x26>
 800542c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005430:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005434:	e7f8      	b.n	8005428 <memmove+0xc>
 8005436:	4283      	cmp	r3, r0
 8005438:	d9f5      	bls.n	8005426 <memmove+0xa>
 800543a:	1881      	adds	r1, r0, r2
 800543c:	1ad2      	subs	r2, r2, r3
 800543e:	42d3      	cmn	r3, r2
 8005440:	d100      	bne.n	8005444 <memmove+0x28>
 8005442:	bd10      	pop	{r4, pc}
 8005444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005448:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800544c:	e7f7      	b.n	800543e <memmove+0x22>
	...

08005450 <_free_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4605      	mov	r5, r0
 8005454:	2900      	cmp	r1, #0
 8005456:	d045      	beq.n	80054e4 <_free_r+0x94>
 8005458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800545c:	1f0c      	subs	r4, r1, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	bfb8      	it	lt
 8005462:	18e4      	addlt	r4, r4, r3
 8005464:	f000 f8d2 	bl	800560c <__malloc_lock>
 8005468:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <_free_r+0x98>)
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	4610      	mov	r0, r2
 800546e:	b933      	cbnz	r3, 800547e <_free_r+0x2e>
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	6014      	str	r4, [r2, #0]
 8005474:	4628      	mov	r0, r5
 8005476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547a:	f000 b8c8 	b.w	800560e <__malloc_unlock>
 800547e:	42a3      	cmp	r3, r4
 8005480:	d90c      	bls.n	800549c <_free_r+0x4c>
 8005482:	6821      	ldr	r1, [r4, #0]
 8005484:	1862      	adds	r2, r4, r1
 8005486:	4293      	cmp	r3, r2
 8005488:	bf04      	itt	eq
 800548a:	681a      	ldreq	r2, [r3, #0]
 800548c:	685b      	ldreq	r3, [r3, #4]
 800548e:	6063      	str	r3, [r4, #4]
 8005490:	bf04      	itt	eq
 8005492:	1852      	addeq	r2, r2, r1
 8005494:	6022      	streq	r2, [r4, #0]
 8005496:	6004      	str	r4, [r0, #0]
 8005498:	e7ec      	b.n	8005474 <_free_r+0x24>
 800549a:	4613      	mov	r3, r2
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	b10a      	cbz	r2, 80054a4 <_free_r+0x54>
 80054a0:	42a2      	cmp	r2, r4
 80054a2:	d9fa      	bls.n	800549a <_free_r+0x4a>
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	1858      	adds	r0, r3, r1
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d10b      	bne.n	80054c4 <_free_r+0x74>
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	4401      	add	r1, r0
 80054b0:	1858      	adds	r0, r3, r1
 80054b2:	4282      	cmp	r2, r0
 80054b4:	6019      	str	r1, [r3, #0]
 80054b6:	d1dd      	bne.n	8005474 <_free_r+0x24>
 80054b8:	6810      	ldr	r0, [r2, #0]
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	4401      	add	r1, r0
 80054c0:	6019      	str	r1, [r3, #0]
 80054c2:	e7d7      	b.n	8005474 <_free_r+0x24>
 80054c4:	d902      	bls.n	80054cc <_free_r+0x7c>
 80054c6:	230c      	movs	r3, #12
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	e7d3      	b.n	8005474 <_free_r+0x24>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	1821      	adds	r1, r4, r0
 80054d0:	428a      	cmp	r2, r1
 80054d2:	bf04      	itt	eq
 80054d4:	6811      	ldreq	r1, [r2, #0]
 80054d6:	6852      	ldreq	r2, [r2, #4]
 80054d8:	6062      	str	r2, [r4, #4]
 80054da:	bf04      	itt	eq
 80054dc:	1809      	addeq	r1, r1, r0
 80054de:	6021      	streq	r1, [r4, #0]
 80054e0:	605c      	str	r4, [r3, #4]
 80054e2:	e7c7      	b.n	8005474 <_free_r+0x24>
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	20000190 	.word	0x20000190

080054ec <_malloc_r>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	1ccd      	adds	r5, r1, #3
 80054f0:	f025 0503 	bic.w	r5, r5, #3
 80054f4:	3508      	adds	r5, #8
 80054f6:	2d0c      	cmp	r5, #12
 80054f8:	bf38      	it	cc
 80054fa:	250c      	movcc	r5, #12
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	4606      	mov	r6, r0
 8005500:	db01      	blt.n	8005506 <_malloc_r+0x1a>
 8005502:	42a9      	cmp	r1, r5
 8005504:	d903      	bls.n	800550e <_malloc_r+0x22>
 8005506:	230c      	movs	r3, #12
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	2000      	movs	r0, #0
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	f000 f87d 	bl	800560c <__malloc_lock>
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <_malloc_r+0xac>)
 8005514:	6814      	ldr	r4, [r2, #0]
 8005516:	4621      	mov	r1, r4
 8005518:	b991      	cbnz	r1, 8005540 <_malloc_r+0x54>
 800551a:	4c20      	ldr	r4, [pc, #128]	; (800559c <_malloc_r+0xb0>)
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	b91b      	cbnz	r3, 8005528 <_malloc_r+0x3c>
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f863 	bl	80055ec <_sbrk_r>
 8005526:	6020      	str	r0, [r4, #0]
 8005528:	4629      	mov	r1, r5
 800552a:	4630      	mov	r0, r6
 800552c:	f000 f85e 	bl	80055ec <_sbrk_r>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d124      	bne.n	800557e <_malloc_r+0x92>
 8005534:	230c      	movs	r3, #12
 8005536:	6033      	str	r3, [r6, #0]
 8005538:	4630      	mov	r0, r6
 800553a:	f000 f868 	bl	800560e <__malloc_unlock>
 800553e:	e7e4      	b.n	800550a <_malloc_r+0x1e>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	1b5b      	subs	r3, r3, r5
 8005544:	d418      	bmi.n	8005578 <_malloc_r+0x8c>
 8005546:	2b0b      	cmp	r3, #11
 8005548:	d90f      	bls.n	800556a <_malloc_r+0x7e>
 800554a:	600b      	str	r3, [r1, #0]
 800554c:	50cd      	str	r5, [r1, r3]
 800554e:	18cc      	adds	r4, r1, r3
 8005550:	4630      	mov	r0, r6
 8005552:	f000 f85c 	bl	800560e <__malloc_unlock>
 8005556:	f104 000b 	add.w	r0, r4, #11
 800555a:	1d23      	adds	r3, r4, #4
 800555c:	f020 0007 	bic.w	r0, r0, #7
 8005560:	1ac3      	subs	r3, r0, r3
 8005562:	d0d3      	beq.n	800550c <_malloc_r+0x20>
 8005564:	425a      	negs	r2, r3
 8005566:	50e2      	str	r2, [r4, r3]
 8005568:	e7d0      	b.n	800550c <_malloc_r+0x20>
 800556a:	428c      	cmp	r4, r1
 800556c:	684b      	ldr	r3, [r1, #4]
 800556e:	bf16      	itet	ne
 8005570:	6063      	strne	r3, [r4, #4]
 8005572:	6013      	streq	r3, [r2, #0]
 8005574:	460c      	movne	r4, r1
 8005576:	e7eb      	b.n	8005550 <_malloc_r+0x64>
 8005578:	460c      	mov	r4, r1
 800557a:	6849      	ldr	r1, [r1, #4]
 800557c:	e7cc      	b.n	8005518 <_malloc_r+0x2c>
 800557e:	1cc4      	adds	r4, r0, #3
 8005580:	f024 0403 	bic.w	r4, r4, #3
 8005584:	42a0      	cmp	r0, r4
 8005586:	d005      	beq.n	8005594 <_malloc_r+0xa8>
 8005588:	1a21      	subs	r1, r4, r0
 800558a:	4630      	mov	r0, r6
 800558c:	f000 f82e 	bl	80055ec <_sbrk_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d0cf      	beq.n	8005534 <_malloc_r+0x48>
 8005594:	6025      	str	r5, [r4, #0]
 8005596:	e7db      	b.n	8005550 <_malloc_r+0x64>
 8005598:	20000190 	.word	0x20000190
 800559c:	20000194 	.word	0x20000194

080055a0 <_realloc_r>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	4607      	mov	r7, r0
 80055a4:	4614      	mov	r4, r2
 80055a6:	460e      	mov	r6, r1
 80055a8:	b921      	cbnz	r1, 80055b4 <_realloc_r+0x14>
 80055aa:	4611      	mov	r1, r2
 80055ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055b0:	f7ff bf9c 	b.w	80054ec <_malloc_r>
 80055b4:	b922      	cbnz	r2, 80055c0 <_realloc_r+0x20>
 80055b6:	f7ff ff4b 	bl	8005450 <_free_r>
 80055ba:	4625      	mov	r5, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c0:	f000 f826 	bl	8005610 <_malloc_usable_size_r>
 80055c4:	42a0      	cmp	r0, r4
 80055c6:	d20f      	bcs.n	80055e8 <_realloc_r+0x48>
 80055c8:	4621      	mov	r1, r4
 80055ca:	4638      	mov	r0, r7
 80055cc:	f7ff ff8e 	bl	80054ec <_malloc_r>
 80055d0:	4605      	mov	r5, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d0f2      	beq.n	80055bc <_realloc_r+0x1c>
 80055d6:	4631      	mov	r1, r6
 80055d8:	4622      	mov	r2, r4
 80055da:	f7ff fc11 	bl	8004e00 <memcpy>
 80055de:	4631      	mov	r1, r6
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ff35 	bl	8005450 <_free_r>
 80055e6:	e7e9      	b.n	80055bc <_realloc_r+0x1c>
 80055e8:	4635      	mov	r5, r6
 80055ea:	e7e7      	b.n	80055bc <_realloc_r+0x1c>

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4c06      	ldr	r4, [pc, #24]	; (8005608 <_sbrk_r+0x1c>)
 80055f0:	2300      	movs	r3, #0
 80055f2:	4605      	mov	r5, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	f7fb fbfa 	bl	8000df0 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	200002dc 	.word	0x200002dc

0800560c <__malloc_lock>:
 800560c:	4770      	bx	lr

0800560e <__malloc_unlock>:
 800560e:	4770      	bx	lr

08005610 <_malloc_usable_size_r>:
 8005610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005614:	1f18      	subs	r0, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	bfbc      	itt	lt
 800561a:	580b      	ldrlt	r3, [r1, r0]
 800561c:	18c0      	addlt	r0, r0, r3
 800561e:	4770      	bx	lr

08005620 <_init>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

0800562c <_fini>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr
